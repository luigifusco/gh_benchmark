//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-33281558
// Cuda compilation tools, release 12.3, V12.3.52
// Based on NVVM 7.0.1
//

.version 8.3
.target sm_90
.address_size 64

.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3};
// _ZZ21gpu_clock_test_kernelPlS_E2gt has been demoted
// _ZZ21gpu_clock_test_kernelPlS_E2lt has been demoted
// _ZZ27device_read_kernel_detailedPdmmPlE12times_vector has been demoted
// _ZZ23device_read_kernel_syncP10ulonglong4mmPlS1_E6clocks has been demoted
// _ZZ24device_write_kernel_syncP10ulonglong2mmPlS1_E6clocks has been demoted
// _ZZ23device_copy_kernel_syncPdS_mmPlS0_E6clocks has been demoted
.global .align 1 .b8 __unnamed_1[85] = {118, 111, 105, 100, 32, 100, 101, 118, 105, 99, 101, 95, 114, 101, 97, 100, 95, 107, 101, 114, 110, 101, 108, 95, 98, 108, 111, 99, 107, 40, 117, 110, 115, 105, 103, 110, 101, 100, 32, 108, 111, 110, 103, 32, 42, 44, 32, 117, 110, 115, 105, 103, 110, 101, 100, 32, 108, 111, 110, 103, 44, 32, 117, 110, 115, 105, 103, 110, 101, 100, 32, 108, 111, 110, 103, 44, 32, 108, 111, 110, 103, 32, 42, 41};
// _ZZ24device_read_kernel_blockPmmmPlE6clocks has been demoted
// _ZZ25device_write_kernel_blockPdmmPlE6clocks has been demoted
// _ZZ24device_copy_kernel_blockPdS_mmPlE6clocks has been demoted
// _ZZ29device_read_kernel_sync_sweepPdS_mmmmPlS0_E6clocks has been demoted
.global .align 1 .b8 _ZN37_INTERNAL_acda41d5_7_main_cu_a5ec78574cuda3std3__48in_placeE[1];
.global .align 1 .b8 _ZN37_INTERNAL_acda41d5_7_main_cu_a5ec78574cuda3std6ranges3__45__cpo4swapE[1];
.global .align 1 .b8 _ZN37_INTERNAL_acda41d5_7_main_cu_a5ec78574cuda3std6ranges3__45__cpo9iter_moveE[1];
.global .align 1 .b8 $str$2[5] = {37, 108, 117, 32};
.global .align 1 .b8 $str$3[16] = {98, 108, 111, 99, 107, 73, 100, 120, 46, 120, 32, 61, 61, 32, 48};
.global .align 1 .b8 $str$4[20] = {114, 101, 97, 100, 95, 119, 114, 105, 116, 101, 95, 99, 111, 112, 121, 46, 104, 112, 112};
.global .align 1 .b8 $str$5[4] = {37, 117, 32};

.func _Z9dumb_copyPVhS0_m(
	.param .b64 _Z9dumb_copyPVhS0_m_param_0,
	.param .b64 _Z9dumb_copyPVhS0_m_param_1,
	.param .b64 _Z9dumb_copyPVhS0_m_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<2>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd5, [_Z9dumb_copyPVhS0_m_param_0];
	ld.param.u64 	%rd6, [_Z9dumb_copyPVhS0_m_param_1];
	ld.param.u64 	%rd7, [_Z9dumb_copyPVhS0_m_param_2];
	setp.eq.s64 	%p1, %rd7, 0;
	@%p1 bra 	$L__BB0_3;

	cvta.to.global.u64 	%rd1, %rd5;
	cvta.to.global.u64 	%rd2, %rd6;
	mov.u64 	%rd11, 0;

$L__BB0_2:
	add.s64 	%rd9, %rd1, %rd11;
	ld.volatile.global.u8 	%rs1, [%rd9];
	add.s64 	%rd10, %rd2, %rd11;
	st.volatile.global.u8 	[%rd10], %rs1;
	add.s64 	%rd11, %rd11, 64;
	setp.lt.u64 	%p2, %rd11, %rd7;
	@%p2 bra 	$L__BB0_2;

$L__BB0_3:
	ret;

}
	// .globl	_Z24clock_granularity_kernelPl
.visible .entry _Z24clock_granularity_kernelPl(
	.param .u64 _Z24clock_granularity_kernelPl_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .b64 	%rd<58>;


	ld.param.u64 	%rd7, [_Z24clock_granularity_kernelPl_param_0];
	cvta.to.global.u64 	%rd56, %rd7;
	mov.u64 	%rd57, 10000;

$L__BB1_1:
	// begin inline asm
	mov.u64 	%rd8, %clock64;
	// end inline asm
	// begin inline asm
	mov.u64 	%rd9, %clock64;
	// end inline asm
	sub.s64 	%rd40, %rd9, %rd8;
	st.global.u64 	[%rd56], %rd40;
	// begin inline asm
	mov.u64 	%rd10, %clock64;
	// end inline asm
	// begin inline asm
	mov.u64 	%rd11, %clock64;
	// end inline asm
	sub.s64 	%rd41, %rd11, %rd10;
	st.global.u64 	[%rd56+8], %rd41;
	// begin inline asm
	mov.u64 	%rd12, %clock64;
	// end inline asm
	// begin inline asm
	mov.u64 	%rd13, %clock64;
	// end inline asm
	sub.s64 	%rd42, %rd13, %rd12;
	st.global.u64 	[%rd56+16], %rd42;
	// begin inline asm
	mov.u64 	%rd14, %clock64;
	// end inline asm
	// begin inline asm
	mov.u64 	%rd15, %clock64;
	// end inline asm
	sub.s64 	%rd43, %rd15, %rd14;
	st.global.u64 	[%rd56+24], %rd43;
	// begin inline asm
	mov.u64 	%rd16, %clock64;
	// end inline asm
	// begin inline asm
	mov.u64 	%rd17, %clock64;
	// end inline asm
	sub.s64 	%rd44, %rd17, %rd16;
	st.global.u64 	[%rd56+32], %rd44;
	// begin inline asm
	mov.u64 	%rd18, %clock64;
	// end inline asm
	// begin inline asm
	mov.u64 	%rd19, %clock64;
	// end inline asm
	sub.s64 	%rd45, %rd19, %rd18;
	st.global.u64 	[%rd56+40], %rd45;
	// begin inline asm
	mov.u64 	%rd20, %clock64;
	// end inline asm
	// begin inline asm
	mov.u64 	%rd21, %clock64;
	// end inline asm
	sub.s64 	%rd46, %rd21, %rd20;
	st.global.u64 	[%rd56+48], %rd46;
	// begin inline asm
	mov.u64 	%rd22, %clock64;
	// end inline asm
	// begin inline asm
	mov.u64 	%rd23, %clock64;
	// end inline asm
	sub.s64 	%rd47, %rd23, %rd22;
	st.global.u64 	[%rd56+56], %rd47;
	// begin inline asm
	mov.u64 	%rd24, %clock64;
	// end inline asm
	// begin inline asm
	mov.u64 	%rd25, %clock64;
	// end inline asm
	sub.s64 	%rd48, %rd25, %rd24;
	st.global.u64 	[%rd56+64], %rd48;
	// begin inline asm
	mov.u64 	%rd26, %clock64;
	// end inline asm
	// begin inline asm
	mov.u64 	%rd27, %clock64;
	// end inline asm
	sub.s64 	%rd49, %rd27, %rd26;
	st.global.u64 	[%rd56+72], %rd49;
	// begin inline asm
	mov.u64 	%rd28, %clock64;
	// end inline asm
	// begin inline asm
	mov.u64 	%rd29, %clock64;
	// end inline asm
	sub.s64 	%rd50, %rd29, %rd28;
	st.global.u64 	[%rd56+80], %rd50;
	// begin inline asm
	mov.u64 	%rd30, %clock64;
	// end inline asm
	// begin inline asm
	mov.u64 	%rd31, %clock64;
	// end inline asm
	sub.s64 	%rd51, %rd31, %rd30;
	st.global.u64 	[%rd56+88], %rd51;
	// begin inline asm
	mov.u64 	%rd32, %clock64;
	// end inline asm
	// begin inline asm
	mov.u64 	%rd33, %clock64;
	// end inline asm
	sub.s64 	%rd52, %rd33, %rd32;
	st.global.u64 	[%rd56+96], %rd52;
	// begin inline asm
	mov.u64 	%rd34, %clock64;
	// end inline asm
	// begin inline asm
	mov.u64 	%rd35, %clock64;
	// end inline asm
	sub.s64 	%rd53, %rd35, %rd34;
	st.global.u64 	[%rd56+104], %rd53;
	// begin inline asm
	mov.u64 	%rd36, %clock64;
	// end inline asm
	// begin inline asm
	mov.u64 	%rd37, %clock64;
	// end inline asm
	sub.s64 	%rd54, %rd37, %rd36;
	st.global.u64 	[%rd56+112], %rd54;
	// begin inline asm
	mov.u64 	%rd38, %clock64;
	// end inline asm
	// begin inline asm
	mov.u64 	%rd39, %clock64;
	// end inline asm
	sub.s64 	%rd55, %rd39, %rd38;
	st.global.u64 	[%rd56+120], %rd55;
	add.s64 	%rd56, %rd56, 128;
	add.s64 	%rd57, %rd57, -16;
	setp.ne.s64 	%p1, %rd57, 0;
	@%p1 bra 	$L__BB1_1;

	ret;

}
	// .globl	_Z31global_clock_granularity_kernelPl
.visible .entry _Z31global_clock_granularity_kernelPl(
	.param .u64 _Z31global_clock_granularity_kernelPl_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .b64 	%rd<58>;


	ld.param.u64 	%rd7, [_Z31global_clock_granularity_kernelPl_param_0];
	cvta.to.global.u64 	%rd56, %rd7;
	mov.u64 	%rd57, 10000;

$L__BB2_1:
	// begin inline asm
	mov.u64 %rd8, %globaltimer;
	// end inline asm
	// begin inline asm
	mov.u64 %rd9, %globaltimer;
	// end inline asm
	sub.s64 	%rd40, %rd9, %rd8;
	st.global.u64 	[%rd56], %rd40;
	// begin inline asm
	mov.u64 %rd10, %globaltimer;
	// end inline asm
	// begin inline asm
	mov.u64 %rd11, %globaltimer;
	// end inline asm
	sub.s64 	%rd41, %rd11, %rd10;
	st.global.u64 	[%rd56+8], %rd41;
	// begin inline asm
	mov.u64 %rd12, %globaltimer;
	// end inline asm
	// begin inline asm
	mov.u64 %rd13, %globaltimer;
	// end inline asm
	sub.s64 	%rd42, %rd13, %rd12;
	st.global.u64 	[%rd56+16], %rd42;
	// begin inline asm
	mov.u64 %rd14, %globaltimer;
	// end inline asm
	// begin inline asm
	mov.u64 %rd15, %globaltimer;
	// end inline asm
	sub.s64 	%rd43, %rd15, %rd14;
	st.global.u64 	[%rd56+24], %rd43;
	// begin inline asm
	mov.u64 %rd16, %globaltimer;
	// end inline asm
	// begin inline asm
	mov.u64 %rd17, %globaltimer;
	// end inline asm
	sub.s64 	%rd44, %rd17, %rd16;
	st.global.u64 	[%rd56+32], %rd44;
	// begin inline asm
	mov.u64 %rd18, %globaltimer;
	// end inline asm
	// begin inline asm
	mov.u64 %rd19, %globaltimer;
	// end inline asm
	sub.s64 	%rd45, %rd19, %rd18;
	st.global.u64 	[%rd56+40], %rd45;
	// begin inline asm
	mov.u64 %rd20, %globaltimer;
	// end inline asm
	// begin inline asm
	mov.u64 %rd21, %globaltimer;
	// end inline asm
	sub.s64 	%rd46, %rd21, %rd20;
	st.global.u64 	[%rd56+48], %rd46;
	// begin inline asm
	mov.u64 %rd22, %globaltimer;
	// end inline asm
	// begin inline asm
	mov.u64 %rd23, %globaltimer;
	// end inline asm
	sub.s64 	%rd47, %rd23, %rd22;
	st.global.u64 	[%rd56+56], %rd47;
	// begin inline asm
	mov.u64 %rd24, %globaltimer;
	// end inline asm
	// begin inline asm
	mov.u64 %rd25, %globaltimer;
	// end inline asm
	sub.s64 	%rd48, %rd25, %rd24;
	st.global.u64 	[%rd56+64], %rd48;
	// begin inline asm
	mov.u64 %rd26, %globaltimer;
	// end inline asm
	// begin inline asm
	mov.u64 %rd27, %globaltimer;
	// end inline asm
	sub.s64 	%rd49, %rd27, %rd26;
	st.global.u64 	[%rd56+72], %rd49;
	// begin inline asm
	mov.u64 %rd28, %globaltimer;
	// end inline asm
	// begin inline asm
	mov.u64 %rd29, %globaltimer;
	// end inline asm
	sub.s64 	%rd50, %rd29, %rd28;
	st.global.u64 	[%rd56+80], %rd50;
	// begin inline asm
	mov.u64 %rd30, %globaltimer;
	// end inline asm
	// begin inline asm
	mov.u64 %rd31, %globaltimer;
	// end inline asm
	sub.s64 	%rd51, %rd31, %rd30;
	st.global.u64 	[%rd56+88], %rd51;
	// begin inline asm
	mov.u64 %rd32, %globaltimer;
	// end inline asm
	// begin inline asm
	mov.u64 %rd33, %globaltimer;
	// end inline asm
	sub.s64 	%rd52, %rd33, %rd32;
	st.global.u64 	[%rd56+96], %rd52;
	// begin inline asm
	mov.u64 %rd34, %globaltimer;
	// end inline asm
	// begin inline asm
	mov.u64 %rd35, %globaltimer;
	// end inline asm
	sub.s64 	%rd53, %rd35, %rd34;
	st.global.u64 	[%rd56+104], %rd53;
	// begin inline asm
	mov.u64 %rd36, %globaltimer;
	// end inline asm
	// begin inline asm
	mov.u64 %rd37, %globaltimer;
	// end inline asm
	sub.s64 	%rd54, %rd37, %rd36;
	st.global.u64 	[%rd56+112], %rd54;
	// begin inline asm
	mov.u64 %rd38, %globaltimer;
	// end inline asm
	// begin inline asm
	mov.u64 %rd39, %globaltimer;
	// end inline asm
	sub.s64 	%rd55, %rd39, %rd38;
	st.global.u64 	[%rd56+120], %rd55;
	add.s64 	%rd56, %rd56, 128;
	add.s64 	%rd57, %rd57, -16;
	setp.ne.s64 	%p1, %rd57, 0;
	@%p1 bra 	$L__BB2_1;

	ret;

}
	// .globl	_Z26basic_loop_overhead_kernelmPlPm
.visible .entry _Z26basic_loop_overhead_kernelmPlPm(
	.param .u64 _Z26basic_loop_overhead_kernelmPlPm_param_0,
	.param .u64 _Z26basic_loop_overhead_kernelmPlPm_param_1,
	.param .u64 _Z26basic_loop_overhead_kernelmPlPm_param_2
)
{
	.reg .pred 	%p<6>;
	.reg .b64 	%rd<45>;


	ld.param.u64 	%rd18, [_Z26basic_loop_overhead_kernelmPlPm_param_0];
	ld.param.u64 	%rd19, [_Z26basic_loop_overhead_kernelmPlPm_param_1];
	ld.param.u64 	%rd20, [_Z26basic_loop_overhead_kernelmPlPm_param_2];
	// begin inline asm
	mov.u64 	%rd21, %clock64;
	// end inline asm
	setp.eq.s64 	%p1, %rd18, 0;
	@%p1 bra 	$L__BB3_7;

	add.s64 	%rd25, %rd18, -1;
	and.b64  	%rd2, %rd18, 3;
	setp.lt.u64 	%p2, %rd25, 3;
	mov.u64 	%rd40, 0;
	@%p2 bra 	$L__BB3_4;

	sub.s64 	%rd3, %rd2, %rd18;
	mov.u64 	%rd40, 0;

$L__BB3_3:
	add.s64 	%rd28, %rd40, %rd44;
	add.s64 	%rd29, %rd40, %rd28;
	add.s64 	%rd30, %rd40, %rd29;
	add.s64 	%rd31, %rd40, %rd30;
	add.s64 	%rd44, %rd31, 6;
	add.s64 	%rd40, %rd40, 4;
	add.s64 	%rd32, %rd3, %rd40;
	setp.ne.s64 	%p3, %rd32, 0;
	@%p3 bra 	$L__BB3_3;

$L__BB3_4:
	setp.eq.s64 	%p4, %rd2, 0;
	@%p4 bra 	$L__BB3_7;

	neg.s64 	%rd41, %rd2;

$L__BB3_6:
	.pragma "nounroll";
	add.s64 	%rd44, %rd40, %rd44;
	add.s64 	%rd40, %rd40, 1;
	add.s64 	%rd41, %rd41, 1;
	setp.ne.s64 	%p5, %rd41, 0;
	@%p5 bra 	$L__BB3_6;

$L__BB3_7:
	// begin inline asm
	mov.u64 	%rd33, %clock64;
	// end inline asm
	sub.s64 	%rd34, %rd33, %rd21;
	cvta.to.global.u64 	%rd35, %rd19;
	cvta.to.global.u64 	%rd36, %rd20;
	st.global.u64 	[%rd35], %rd34;
	st.global.u64 	[%rd36], %rd44;
	ret;

}
	// .globl	_Z16get_clock_kernelPm
.visible .entry _Z16get_clock_kernelPm(
	.param .u64 _Z16get_clock_kernelPm_param_0
)
{
	.reg .b64 	%rd<4>;


	ld.param.u64 	%rd2, [_Z16get_clock_kernelPm_param_0];
	cvta.to.global.u64 	%rd3, %rd2;
	// begin inline asm
	mov.u64 %rd1, %globaltimer;
	// end inline asm
	st.global.u64 	[%rd3], %rd1;
	ret;

}
	// .globl	_Z9gpu_sleepidPl
.visible .entry _Z9gpu_sleepidPl(
	.param .u32 _Z9gpu_sleepidPl_param_0,
	.param .f64 _Z9gpu_sleepidPl_param_1,
	.param .u64 _Z9gpu_sleepidPl_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<6>;


	ld.param.u32 	%r1, [_Z9gpu_sleepidPl_param_0];
	ld.param.f64 	%fd1, [_Z9gpu_sleepidPl_param_1];
	ld.param.u64 	%rd4, [_Z9gpu_sleepidPl_param_2];
	cvta.to.global.u64 	%rd1, %rd4;
	// begin inline asm
	mov.u64 	%rd3, %clock64;
	// end inline asm
	cvt.rn.f64.s64 	%fd2, %rd3;
	cvt.rn.f64.s32 	%fd3, %r1;
	fma.rn.f64 	%fd4, %fd3, %fd1, %fd2;
	cvt.rzi.s64.f64 	%rd2, %fd4;

$L__BB5_1:
	// begin inline asm
	mov.u64 	%rd5, %clock64;
	// end inline asm
	setp.lt.s64 	%p1, %rd5, %rd2;
	@%p1 bra 	$L__BB5_1;

	st.global.u64 	[%rd1], %rd2;
	ret;

}
	// .globl	_Z21gpu_clock_test_kernelPlS_
.visible .entry _Z21gpu_clock_test_kernelPlS_(
	.param .u64 _Z21gpu_clock_test_kernelPlS__param_0,
	.param .u64 _Z21gpu_clock_test_kernelPlS__param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<19>;
	.reg .b64 	%rd<87>;
	// demoted variable
	.shared .align 8 .b8 _ZZ21gpu_clock_test_kernelPlS_E2gt[8192];
	// demoted variable
	.shared .align 8 .b8 _ZZ21gpu_clock_test_kernelPlS_E2lt[8192];

	ld.param.u64 	%rd12, [_Z21gpu_clock_test_kernelPlS__param_0];
	ld.param.u64 	%rd14, [_Z21gpu_clock_test_kernelPlS__param_1];
	cvta.to.global.u64 	%rd1, %rd14;
	mov.u64 	%rd83, 1024;
	mov.u32 	%r16, _ZZ21gpu_clock_test_kernelPlS_E2gt;
	mov.u32 	%r15, _ZZ21gpu_clock_test_kernelPlS_E2lt;

$L__BB6_1:
	// begin inline asm
	mov.u64 %rd15, %globaltimer;
	// end inline asm
	st.shared.u64 	[%r16], %rd15;
	// begin inline asm
	mov.u64 	%rd16, %clock64;
	// end inline asm
	st.shared.u64 	[%r15], %rd16;
	// begin inline asm
	mov.u64 %rd17, %globaltimer;
	// end inline asm
	st.shared.u64 	[%r16+8], %rd17;
	// begin inline asm
	mov.u64 	%rd18, %clock64;
	// end inline asm
	st.shared.u64 	[%r15+8], %rd18;
	// begin inline asm
	mov.u64 %rd19, %globaltimer;
	// end inline asm
	st.shared.u64 	[%r16+16], %rd19;
	// begin inline asm
	mov.u64 	%rd20, %clock64;
	// end inline asm
	st.shared.u64 	[%r15+16], %rd20;
	// begin inline asm
	mov.u64 %rd21, %globaltimer;
	// end inline asm
	st.shared.u64 	[%r16+24], %rd21;
	// begin inline asm
	mov.u64 	%rd22, %clock64;
	// end inline asm
	st.shared.u64 	[%r15+24], %rd22;
	// begin inline asm
	mov.u64 %rd23, %globaltimer;
	// end inline asm
	st.shared.u64 	[%r16+32], %rd23;
	// begin inline asm
	mov.u64 	%rd24, %clock64;
	// end inline asm
	st.shared.u64 	[%r15+32], %rd24;
	// begin inline asm
	mov.u64 %rd25, %globaltimer;
	// end inline asm
	st.shared.u64 	[%r16+40], %rd25;
	// begin inline asm
	mov.u64 	%rd26, %clock64;
	// end inline asm
	st.shared.u64 	[%r15+40], %rd26;
	// begin inline asm
	mov.u64 %rd27, %globaltimer;
	// end inline asm
	st.shared.u64 	[%r16+48], %rd27;
	// begin inline asm
	mov.u64 	%rd28, %clock64;
	// end inline asm
	st.shared.u64 	[%r15+48], %rd28;
	// begin inline asm
	mov.u64 %rd29, %globaltimer;
	// end inline asm
	st.shared.u64 	[%r16+56], %rd29;
	// begin inline asm
	mov.u64 	%rd30, %clock64;
	// end inline asm
	st.shared.u64 	[%r15+56], %rd30;
	// begin inline asm
	mov.u64 %rd31, %globaltimer;
	// end inline asm
	st.shared.u64 	[%r16+64], %rd31;
	// begin inline asm
	mov.u64 	%rd32, %clock64;
	// end inline asm
	st.shared.u64 	[%r15+64], %rd32;
	// begin inline asm
	mov.u64 %rd33, %globaltimer;
	// end inline asm
	st.shared.u64 	[%r16+72], %rd33;
	// begin inline asm
	mov.u64 	%rd34, %clock64;
	// end inline asm
	st.shared.u64 	[%r15+72], %rd34;
	// begin inline asm
	mov.u64 %rd35, %globaltimer;
	// end inline asm
	st.shared.u64 	[%r16+80], %rd35;
	// begin inline asm
	mov.u64 	%rd36, %clock64;
	// end inline asm
	st.shared.u64 	[%r15+80], %rd36;
	// begin inline asm
	mov.u64 %rd37, %globaltimer;
	// end inline asm
	st.shared.u64 	[%r16+88], %rd37;
	// begin inline asm
	mov.u64 	%rd38, %clock64;
	// end inline asm
	st.shared.u64 	[%r15+88], %rd38;
	// begin inline asm
	mov.u64 %rd39, %globaltimer;
	// end inline asm
	st.shared.u64 	[%r16+96], %rd39;
	// begin inline asm
	mov.u64 	%rd40, %clock64;
	// end inline asm
	st.shared.u64 	[%r15+96], %rd40;
	// begin inline asm
	mov.u64 %rd41, %globaltimer;
	// end inline asm
	st.shared.u64 	[%r16+104], %rd41;
	// begin inline asm
	mov.u64 	%rd42, %clock64;
	// end inline asm
	st.shared.u64 	[%r15+104], %rd42;
	// begin inline asm
	mov.u64 %rd43, %globaltimer;
	// end inline asm
	st.shared.u64 	[%r16+112], %rd43;
	// begin inline asm
	mov.u64 	%rd44, %clock64;
	// end inline asm
	st.shared.u64 	[%r15+112], %rd44;
	// begin inline asm
	mov.u64 %rd45, %globaltimer;
	// end inline asm
	st.shared.u64 	[%r16+120], %rd45;
	// begin inline asm
	mov.u64 	%rd46, %clock64;
	// end inline asm
	st.shared.u64 	[%r15+120], %rd46;
	add.s32 	%r16, %r16, 128;
	add.s32 	%r15, %r15, 128;
	add.s64 	%rd83, %rd83, -16;
	setp.ne.s64 	%p1, %rd83, 0;
	@%p1 bra 	$L__BB6_1;

	cvta.to.global.u64 	%rd48, %rd12;
	mov.u32 	%r13, %ctaid.x;
	shl.b32 	%r14, %r13, 10;
	mul.wide.u32 	%rd49, %r14, 8;
	or.b64  	%rd50, %rd49, 64;
	add.s64 	%rd85, %rd1, %rd50;
	add.s64 	%rd84, %rd48, %rd50;
	mov.u64 	%rd86, 1024;
	mov.u32 	%r18, _ZZ21gpu_clock_test_kernelPlS_E2lt;
	mov.u32 	%r17, _ZZ21gpu_clock_test_kernelPlS_E2gt;

$L__BB6_3:
	ld.shared.u64 	%rd51, [%r17];
	st.global.u64 	[%rd84+-64], %rd51;
	ld.shared.u64 	%rd52, [%r18];
	st.global.u64 	[%rd85+-64], %rd52;
	ld.shared.u64 	%rd53, [%r17+8];
	st.global.u64 	[%rd84+-56], %rd53;
	ld.shared.u64 	%rd54, [%r18+8];
	st.global.u64 	[%rd85+-56], %rd54;
	ld.shared.u64 	%rd55, [%r17+16];
	st.global.u64 	[%rd84+-48], %rd55;
	ld.shared.u64 	%rd56, [%r18+16];
	st.global.u64 	[%rd85+-48], %rd56;
	ld.shared.u64 	%rd57, [%r17+24];
	st.global.u64 	[%rd84+-40], %rd57;
	ld.shared.u64 	%rd58, [%r18+24];
	st.global.u64 	[%rd85+-40], %rd58;
	ld.shared.u64 	%rd59, [%r17+32];
	st.global.u64 	[%rd84+-32], %rd59;
	ld.shared.u64 	%rd60, [%r18+32];
	st.global.u64 	[%rd85+-32], %rd60;
	ld.shared.u64 	%rd61, [%r17+40];
	st.global.u64 	[%rd84+-24], %rd61;
	ld.shared.u64 	%rd62, [%r18+40];
	st.global.u64 	[%rd85+-24], %rd62;
	ld.shared.u64 	%rd63, [%r17+48];
	st.global.u64 	[%rd84+-16], %rd63;
	ld.shared.u64 	%rd64, [%r18+48];
	st.global.u64 	[%rd85+-16], %rd64;
	ld.shared.u64 	%rd65, [%r17+56];
	st.global.u64 	[%rd84+-8], %rd65;
	ld.shared.u64 	%rd66, [%r18+56];
	st.global.u64 	[%rd85+-8], %rd66;
	ld.shared.u64 	%rd67, [%r17+64];
	st.global.u64 	[%rd84], %rd67;
	ld.shared.u64 	%rd68, [%r18+64];
	st.global.u64 	[%rd85], %rd68;
	ld.shared.u64 	%rd69, [%r17+72];
	st.global.u64 	[%rd84+8], %rd69;
	ld.shared.u64 	%rd70, [%r18+72];
	st.global.u64 	[%rd85+8], %rd70;
	ld.shared.u64 	%rd71, [%r17+80];
	st.global.u64 	[%rd84+16], %rd71;
	ld.shared.u64 	%rd72, [%r18+80];
	st.global.u64 	[%rd85+16], %rd72;
	ld.shared.u64 	%rd73, [%r17+88];
	st.global.u64 	[%rd84+24], %rd73;
	ld.shared.u64 	%rd74, [%r18+88];
	st.global.u64 	[%rd85+24], %rd74;
	ld.shared.u64 	%rd75, [%r17+96];
	st.global.u64 	[%rd84+32], %rd75;
	ld.shared.u64 	%rd76, [%r18+96];
	st.global.u64 	[%rd85+32], %rd76;
	ld.shared.u64 	%rd77, [%r17+104];
	st.global.u64 	[%rd84+40], %rd77;
	ld.shared.u64 	%rd78, [%r18+104];
	st.global.u64 	[%rd85+40], %rd78;
	ld.shared.u64 	%rd79, [%r17+112];
	st.global.u64 	[%rd84+48], %rd79;
	ld.shared.u64 	%rd80, [%r18+112];
	st.global.u64 	[%rd85+48], %rd80;
	ld.shared.u64 	%rd81, [%r17+120];
	st.global.u64 	[%rd84+56], %rd81;
	ld.shared.u64 	%rd82, [%r18+120];
	st.global.u64 	[%rd85+56], %rd82;
	add.s64 	%rd85, %rd85, 128;
	add.s64 	%rd84, %rd84, 128;
	add.s32 	%r18, %r18, 128;
	add.s32 	%r17, %r17, 128;
	add.s64 	%rd86, %rd86, -16;
	setp.ne.s64 	%p2, %rd86, 0;
	@%p2 bra 	$L__BB6_3;

	ret;

}
	// .globl	_Z31device_write_preparation_kernelPhm
.visible .entry _Z31device_write_preparation_kernelPhm(
	.param .u64 _Z31device_write_preparation_kernelPhm_param_0,
	.param .u64 _Z31device_write_preparation_kernelPhm_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd6, [_Z31device_write_preparation_kernelPhm_param_0];
	ld.param.u64 	%rd7, [_Z31device_write_preparation_kernelPhm_param_1];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r2, %r1, %r3;
	mul.wide.u32 	%rd9, %r4, 32;
	setp.ge.u64 	%p1, %rd9, %rd7;
	@%p1 bra 	$L__BB7_3;

	mov.u32 	%r5, %nctaid.x;
	mul.lo.s32 	%r6, %r5, %r1;
	shl.b32 	%r7, %r6, 5;
	cvt.u64.u32 	%rd2, %r7;
	cvta.to.global.u64 	%rd3, %rd6;

$L__BB7_2:
	add.s64 	%rd8, %rd3, %rd9;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd8], %rs1;
	add.s64 	%rd9, %rd9, %rd2;
	setp.lt.u64 	%p2, %rd9, %rd7;
	@%p2 bra 	$L__BB7_2;

$L__BB7_3:
	ret;

}
	// .globl	_Z30device_read_preparation_kernelPhm
.visible .entry _Z30device_read_preparation_kernelPhm(
	.param .u64 _Z30device_read_preparation_kernelPhm_param_0,
	.param .u64 _Z30device_read_preparation_kernelPhm_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd5, [_Z30device_read_preparation_kernelPhm_param_1];
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r3, %ctaid.x;
	mad.lo.s32 	%r4, %r3, %r1, %r2;
	mul.wide.u32 	%rd6, %r4, 32;
	setp.ge.u64 	%p1, %rd6, %rd5;
	@%p1 bra 	$L__BB8_3;

	mov.u32 	%r5, %nctaid.x;
	mul.lo.s32 	%r6, %r5, %r1;
	shl.b32 	%r7, %r6, 5;
	cvt.u64.u32 	%rd2, %r7;

$L__BB8_2:
	add.s64 	%rd6, %rd6, %rd2;
	setp.lt.u64 	%p2, %rd6, %rd5;
	@%p2 bra 	$L__BB8_2;

$L__BB8_3:
	ret;

}
	// .globl	_Z27device_modified_init_kernelPhm
.visible .entry _Z27device_modified_init_kernelPhm(
	.param .u64 _Z27device_modified_init_kernelPhm_param_0,
	.param .u64 _Z27device_modified_init_kernelPhm_param_1
)
{
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z27device_modified_init_kernelPhm_param_0];
	ld.param.u64 	%rd2, [_Z27device_modified_init_kernelPhm_param_1];
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd1;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd1;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd2;
	call.uni 
	_Z9dumb_copyPVhS0_m, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 0
	ret;

}
	// .globl	_Z24loopy_write_kernel_clockPhmPlS0_
.visible .entry _Z24loopy_write_kernel_clockPhmPlS0_(
	.param .u64 _Z24loopy_write_kernel_clockPhmPlS0__param_0,
	.param .u64 _Z24loopy_write_kernel_clockPhmPlS0__param_1,
	.param .u64 _Z24loopy_write_kernel_clockPhmPlS0__param_2,
	.param .u64 _Z24loopy_write_kernel_clockPhmPlS0__param_3
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<3>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<39>;


	ld.param.u64 	%rd36, [_Z24loopy_write_kernel_clockPhmPlS0__param_0];
	ld.param.u64 	%rd19, [_Z24loopy_write_kernel_clockPhmPlS0__param_1];
	ld.param.u64 	%rd16, [_Z24loopy_write_kernel_clockPhmPlS0__param_2];
	ld.param.u64 	%rd17, [_Z24loopy_write_kernel_clockPhmPlS0__param_3];
	// begin inline asm
	mov.u64 	%rd18, %clock64;
	// end inline asm
	shr.u64 	%rd2, %rd19, 6;
	setp.eq.s64 	%p1, %rd2, 0;
	@%p1 bra 	$L__BB10_7;

	add.s64 	%rd20, %rd2, -1;
	and.b64  	%rd3, %rd2, 7;
	setp.lt.u64 	%p2, %rd20, 7;
	@%p2 bra 	$L__BB10_4;

	sub.s64 	%rd34, %rd3, %rd2;

$L__BB10_3:
	.pragma "nounroll";
	ld.u64 	%rd21, [%rd36];
	mov.u16 	%rs1, 0;
	st.volatile.u8 	[%rd36], %rs1;
	ld.u64 	%rd22, [%rd21];
	st.volatile.u8 	[%rd21], %rs1;
	ld.u64 	%rd23, [%rd22];
	st.volatile.u8 	[%rd22], %rs1;
	ld.u64 	%rd24, [%rd23];
	st.volatile.u8 	[%rd23], %rs1;
	ld.u64 	%rd25, [%rd24];
	st.volatile.u8 	[%rd24], %rs1;
	ld.u64 	%rd26, [%rd25];
	st.volatile.u8 	[%rd25], %rs1;
	ld.u64 	%rd27, [%rd26];
	st.volatile.u8 	[%rd26], %rs1;
	ld.u64 	%rd36, [%rd27];
	st.volatile.u8 	[%rd27], %rs1;
	add.s64 	%rd34, %rd34, 8;
	setp.ne.s64 	%p3, %rd34, 0;
	@%p3 bra 	$L__BB10_3;

$L__BB10_4:
	setp.eq.s64 	%p4, %rd3, 0;
	@%p4 bra 	$L__BB10_7;

	neg.s64 	%rd37, %rd3;

$L__BB10_6:
	.pragma "nounroll";
	ld.u64 	%rd13, [%rd36];
	mov.u16 	%rs2, 0;
	st.volatile.u8 	[%rd36], %rs2;
	add.s64 	%rd37, %rd37, 1;
	setp.ne.s64 	%p5, %rd37, 0;
	mov.u64 	%rd36, %rd13;
	@%p5 bra 	$L__BB10_6;

$L__BB10_7:
	membar.sys;
	// begin inline asm
	mov.u64 	%rd28, %clock64;
	// end inline asm
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mad.lo.s32 	%r4, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd29, %rd16;
	mul.wide.s32 	%rd30, %r4, 8;
	add.s64 	%rd31, %rd29, %rd30;
	cvta.to.global.u64 	%rd32, %rd17;
	add.s64 	%rd33, %rd32, %rd30;
	st.global.u64 	[%rd31], %rd18;
	st.global.u64 	[%rd33], %rd28;
	ret;

}
	// .globl	_Z20pointer_chase_kernelPy
.visible .entry _Z20pointer_chase_kernelPy(
	.param .u64 _Z20pointer_chase_kernelPy_param_0
)
{
	.reg .pred 	%p<3>;
	.reg .b64 	%rd<6>;


	ld.param.u64 	%rd5, [_Z20pointer_chase_kernelPy_param_0];
	setp.eq.s64 	%p1, %rd5, 0;
	@%p1 bra 	$L__BB11_2;

$L__BB11_1:
	cvta.to.global.u64 	%rd4, %rd5;
	ld.global.nc.u64 	%rd5, [%rd4];
	setp.ne.s64 	%p2, %rd5, 0;
	@%p2 bra 	$L__BB11_1;

$L__BB11_2:
	ret;

}
	// .globl	_Z31atomic_cas_pointer_chase_kernelPy
.visible .entry _Z31atomic_cas_pointer_chase_kernelPy(
	.param .u64 _Z31atomic_cas_pointer_chase_kernelPy_param_0
)
{
	.reg .pred 	%p<3>;
	.reg .b64 	%rd<6>;


	ld.param.u64 	%rd5, [_Z31atomic_cas_pointer_chase_kernelPy_param_0];
	setp.eq.s64 	%p1, %rd5, 0;
	@%p1 bra 	$L__BB12_2;

$L__BB12_1:
	mov.u64 	%rd4, 0;
	atom.cas.b64 	%rd5, [%rd5], %rd4, %rd4;
	setp.ne.s64 	%p2, %rd5, 0;
	@%p2 bra 	$L__BB12_1;

$L__BB12_2:
	ret;

}
	// .globl	_Z30ping_pong_receive_first_kernelPvS_S_PbS_S0_m
.visible .entry _Z30ping_pong_receive_first_kernelPvS_S_PbS_S0_m(
	.param .u64 _Z30ping_pong_receive_first_kernelPvS_S_PbS_S0_m_param_0,
	.param .u64 _Z30ping_pong_receive_first_kernelPvS_S_PbS_S0_m_param_1,
	.param .u64 _Z30ping_pong_receive_first_kernelPvS_S_PbS_S0_m_param_2,
	.param .u64 _Z30ping_pong_receive_first_kernelPvS_S_PbS_S0_m_param_3,
	.param .u64 _Z30ping_pong_receive_first_kernelPvS_S_PbS_S0_m_param_4,
	.param .u64 _Z30ping_pong_receive_first_kernelPvS_S_PbS_S0_m_param_5,
	.param .u64 _Z30ping_pong_receive_first_kernelPvS_S_PbS_S0_m_param_6
)
{
	.reg .pred 	%p<7>;
	.reg .b16 	%rs<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<34>;


	ld.param.u64 	%rd12, [_Z30ping_pong_receive_first_kernelPvS_S_PbS_S0_m_param_0];
	ld.param.u64 	%rd13, [_Z30ping_pong_receive_first_kernelPvS_S_PbS_S0_m_param_1];
	ld.param.u64 	%rd14, [_Z30ping_pong_receive_first_kernelPvS_S_PbS_S0_m_param_2];
	ld.param.u64 	%rd15, [_Z30ping_pong_receive_first_kernelPvS_S_PbS_S0_m_param_3];
	ld.param.u64 	%rd16, [_Z30ping_pong_receive_first_kernelPvS_S_PbS_S0_m_param_4];
	ld.param.u64 	%rd17, [_Z30ping_pong_receive_first_kernelPvS_S_PbS_S0_m_param_5];
	ld.param.u64 	%rd18, [_Z30ping_pong_receive_first_kernelPvS_S_PbS_S0_m_param_6];
	mov.u32 	%r1, %ntid.y;
	mov.u32 	%r4, %tid.z;
	mov.u32 	%r5, %tid.y;
	mad.lo.s32 	%r6, %r1, %r4, %r5;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r3, %r6, %r2, %r7;
	setp.ne.s32 	%p1, %r3, 0;
	@%p1 bra 	$L__BB13_2;

	cvta.to.global.u64 	%rd20, %rd17;
	ld.global.u8 	%rs1, [%rd20];
	setp.eq.s16 	%p2, %rs1, 0;
	@%p2 bra 	$L__BB13_9;

$L__BB13_2:
	bar.sync 	0;
	shr.u64 	%rd1, %rd18, 3;
	cvt.u64.u32 	%rd33, %r3;
	setp.le.u64 	%p3, %rd1, %rd33;
	@%p3 bra 	$L__BB13_6;

	mul.lo.s32 	%r8, %r2, %r1;
	mov.u32 	%r9, %ntid.z;
	mul.lo.s32 	%r10, %r8, %r9;
	cvt.u64.u32 	%rd3, %r10;
	cvta.to.global.u64 	%rd4, %rd13;
	cvta.to.global.u64 	%rd5, %rd16;
	cvta.to.global.u64 	%rd6, %rd14;
	cvta.to.global.u64 	%rd7, %rd12;
	mov.u64 	%rd32, %rd33;

$L__BB13_4:
	shl.b64 	%rd22, %rd32, 3;
	add.s64 	%rd23, %rd5, %rd22;
	ld.global.u64 	%rd24, [%rd23];
	add.s64 	%rd25, %rd4, %rd22;
	st.global.u64 	[%rd25], %rd24;
	add.s64 	%rd32, %rd32, %rd3;
	setp.lt.u64 	%p4, %rd32, %rd1;
	@%p4 bra 	$L__BB13_4;

$L__BB13_5:
	shl.b64 	%rd27, %rd33, 3;
	add.s64 	%rd28, %rd7, %rd27;
	ld.global.u64 	%rd29, [%rd28];
	add.s64 	%rd30, %rd6, %rd27;
	st.global.u64 	[%rd30], %rd29;
	add.s64 	%rd33, %rd33, %rd3;
	setp.lt.u64 	%p5, %rd33, %rd1;
	@%p5 bra 	$L__BB13_5;

$L__BB13_6:
	membar.sys;
	bar.sync 	0;
	@%p1 bra 	$L__BB13_8;

	cvta.to.global.u64 	%rd31, %rd15;
	mov.u16 	%rs2, 1;
	st.global.u8 	[%rd31], %rs2;

$L__BB13_8:
	ret;

$L__BB13_9:
	bra.uni 	$L__BB13_9;

}
	// .globl	_Z18device_pong_kernelPN4cuda3std3__46atomicIhEE
.visible .entry _Z18device_pong_kernelPN4cuda3std3__46atomicIhEE(
	.param .u64 _Z18device_pong_kernelPN4cuda3std3__46atomicIhEE_param_0
)
{
	.local .align 1 .b8 	__local_depot14[3];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<15>;
	.reg .b16 	%rs<16>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<27>;


	mov.u64 	%SPL, __local_depot14;
	ld.param.u64 	%rd14, [_Z18device_pong_kernelPN4cuda3std3__46atomicIhEE_param_0];
	add.u64 	%rd1, %SPL, 0;
	add.u64 	%rd2, %SPL, 1;
	add.u64 	%rd3, %SPL, 2;
	// begin inline asm
	fence.sc.sys;
	// end inline asm
	mov.u32 	%r13, 0;
	// begin inline asm
	st.relaxed.sys.b32 [%rd14], %r13;
	// end inline asm
	mov.u16 	%rs15, 1;
	st.local.u8 	[%rd3], %rs15;
	bra.uni 	$L__BB14_1;

$L__BB14_17:
	mov.u16 	%rs15, 1;
	st.local.u8 	[%rd3], %rs15;

$L__BB14_1:
	st.local.u8 	[%rd2], %rs15;

$L__BB14_2:
	cvt.u32.u16 	%r10, %rs15;
	and.b32  	%r2, %r10, 255;
	mov.u32 	%r9, 0;
	// begin inline asm
	atom.cas.relaxed.sys.b32 %r7,[%rd14],%r2,%r9;
	// end inline asm
	setp.eq.s32 	%p2, %r7, %r2;
	cvt.u16.u32 	%rs4, %r7;
	st.local.u8 	[%rd1], %rs4;
	@%p2 bra 	$L__BB14_9;

	mov.u64 	%rd23, 0;

$L__BB14_4:
	add.s64 	%rd5, %rd1, %rd23;
	add.s64 	%rd6, %rd3, %rd23;
	setp.eq.s64 	%p3, %rd23, 1;
	@%p3 bra 	$L__BB14_8;

	ld.local.u8 	%rs5, [%rd5];
	ld.local.u8 	%rs6, [%rd6];
	setp.lt.u16 	%p4, %rs5, %rs6;
	@%p4 bra 	$L__BB14_7;

	setp.le.u16 	%p5, %rs5, %rs6;
	add.s64 	%rd23, %rd23, 1;
	@%p5 bra 	$L__BB14_4;

$L__BB14_7:
	st.local.u8 	[%rd3], %rs4;
	mov.u16 	%rs15, %rs4;
	bra.uni 	$L__BB14_9;

$L__BB14_8:
	mov.u32 	%r12, 255;
	// begin inline asm
	atom.and.relaxed.sys.b32 %r11,[%rd14],%r12;
	// end inline asm

$L__BB14_9:
	mov.pred 	%p14, 0;
	@%p2 bra 	$L__BB14_14;

	mov.u64 	%rd24, 1;
	mov.u64 	%rd25, %rd2;
	mov.u64 	%rd26, %rd3;

$L__BB14_11:
	setp.eq.s64 	%p8, %rd24, 0;
	@%p8 bra 	$L__BB14_2;

	ld.local.u8 	%rs8, [%rd25];
	ld.local.u8 	%rs9, [%rd26];
	setp.lt.u16 	%p10, %rs8, %rs9;
	mov.pred 	%p14, -1;
	@%p10 bra 	$L__BB14_14;

	add.s64 	%rd26, %rd26, 1;
	add.s64 	%rd25, %rd25, 1;
	setp.le.u16 	%p12, %rs8, %rs9;
	add.s64 	%rd24, %rd24, -1;
	@%p12 bra 	$L__BB14_11;

$L__BB14_14:
	@%p14 bra 	$L__BB14_17;

	add.s32 	%r13, %r13, 1;
	setp.lt.u32 	%p13, %r13, 10000;
	@%p13 bra 	$L__BB14_1;

	ret;

}
	// .globl	_Z18device_ping_kernelPN4cuda3std3__46atomicIhEEPl
.visible .entry _Z18device_ping_kernelPN4cuda3std3__46atomicIhEEPl(
	.param .u64 _Z18device_ping_kernelPN4cuda3std3__46atomicIhEEPl_param_0,
	.param .u64 _Z18device_ping_kernelPN4cuda3std3__46atomicIhEEPl_param_1
)
{
	.local .align 1 .b8 	__local_depot15[3];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<33>;


	mov.u64 	%SPL, __local_depot15;
	ld.param.u64 	%rd15, [_Z18device_ping_kernelPN4cuda3std3__46atomicIhEEPl_param_0];
	ld.param.u64 	%rd16, [_Z18device_ping_kernelPN4cuda3std3__46atomicIhEEPl_param_1];
	add.u64 	%rd1, %SPL, 0;
	add.u64 	%rd2, %SPL, 1;
	add.u64 	%rd3, %SPL, 2;
	mov.u16 	%rs10, 0;
	st.local.u8 	[%rd3], %rs10;

$L__BB15_1:
	// begin inline asm
	fence.sc.sys;
	// end inline asm
	// begin inline asm
	ld.acquire.sys.b32 %r5,[%rd15];
	// end inline asm
	cvt.u16.u32 	%rs11, %r5;
	and.b16  	%rs12, %rs11, 255;
	setp.eq.s16 	%p2, %rs12, 1;
	@%p2 bra 	$L__BB15_1;

	// begin inline asm
	mov.u64 	%rd21, %clock64;
	// end inline asm
	mov.u32 	%r13, 0;
	mov.u16 	%rs18, 0;
	bra.uni 	$L__BB15_3;

$L__BB15_19:
	mov.u16 	%rs18, 0;
	st.local.u8 	[%rd3], %rs18;

$L__BB15_3:
	st.local.u8 	[%rd2], %rs18;

$L__BB15_4:
	cvt.u32.u16 	%r10, %rs18;
	and.b32  	%r2, %r10, 255;
	mov.u32 	%r9, 1;
	// begin inline asm
	atom.cas.relaxed.sys.b32 %r7,[%rd15],%r2,%r9;
	// end inline asm
	setp.eq.s32 	%p3, %r7, %r2;
	cvt.u16.u32 	%rs4, %r7;
	st.local.u8 	[%rd1], %rs4;
	@%p3 bra 	$L__BB15_11;

	mov.u64 	%rd29, 0;

$L__BB15_6:
	add.s64 	%rd6, %rd1, %rd29;
	add.s64 	%rd7, %rd3, %rd29;
	setp.eq.s64 	%p4, %rd29, 1;
	@%p4 bra 	$L__BB15_10;

	ld.local.u8 	%rs5, [%rd6];
	ld.local.u8 	%rs6, [%rd7];
	setp.lt.u16 	%p5, %rs5, %rs6;
	@%p5 bra 	$L__BB15_9;

	setp.le.u16 	%p6, %rs5, %rs6;
	add.s64 	%rd29, %rd29, 1;
	@%p6 bra 	$L__BB15_6;

$L__BB15_9:
	st.local.u8 	[%rd3], %rs4;
	mov.u16 	%rs18, %rs4;
	bra.uni 	$L__BB15_11;

$L__BB15_10:
	mov.u32 	%r12, 255;
	// begin inline asm
	atom.and.relaxed.sys.b32 %r11,[%rd15],%r12;
	// end inline asm

$L__BB15_11:
	mov.pred 	%p15, 0;
	@%p3 bra 	$L__BB15_16;

	mov.u64 	%rd30, 1;
	mov.u64 	%rd31, %rd2;
	mov.u64 	%rd32, %rd3;

$L__BB15_13:
	setp.eq.s64 	%p9, %rd30, 0;
	@%p9 bra 	$L__BB15_4;

	ld.local.u8 	%rs8, [%rd31];
	ld.local.u8 	%rs9, [%rd32];
	setp.lt.u16 	%p11, %rs8, %rs9;
	mov.pred 	%p15, -1;
	@%p11 bra 	$L__BB15_16;

	add.s64 	%rd32, %rd32, 1;
	add.s64 	%rd31, %rd31, 1;
	setp.le.u16 	%p13, %rs8, %rs9;
	add.s64 	%rd30, %rd30, -1;
	@%p13 bra 	$L__BB15_13;

$L__BB15_16:
	@%p15 bra 	$L__BB15_19;

	add.s32 	%r13, %r13, 1;
	setp.lt.u32 	%p14, %r13, 10000;
	@%p14 bra 	$L__BB15_3;

	// begin inline asm
	mov.u64 	%rd26, %clock64;
	// end inline asm
	sub.s64 	%rd27, %rd26, %rd21;
	cvta.to.global.u64 	%rd28, %rd16;
	st.global.u64 	[%rd28], %rd27;
	ret;

}
	// .globl	_Z27device_pong_kernel_volatilePVh
.visible .entry _Z27device_pong_kernel_volatilePVh(
	.param .u64 _Z27device_pong_kernel_volatilePVh_param_0
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<4>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd2, [_Z27device_pong_kernel_volatilePVh_param_0];
	cvta.to.global.u64 	%rd1, %rd2;
	mov.u16 	%rs1, 0;
	st.volatile.global.u8 	[%rd1], %rs1;
	mov.u32 	%r4, 0;

$L__BB16_1:
	ld.volatile.global.u8 	%rs2, [%rd1];
	setp.eq.s16 	%p1, %rs2, 0;
	@%p1 bra 	$L__BB16_1;

	mov.u16 	%rs3, 0;
	st.volatile.global.u8 	[%rd1], %rs3;
	add.s32 	%r4, %r4, 1;
	setp.lt.u32 	%p2, %r4, 10000;
	@%p2 bra 	$L__BB16_1;

	ret;

}
	// .globl	_Z27device_ping_kernel_volatilePVhPl
.visible .entry _Z27device_ping_kernel_volatilePVhPl(
	.param .u64 _Z27device_ping_kernel_volatilePVhPl_param_0,
	.param .u64 _Z27device_ping_kernel_volatilePVhPl_param_1
)
{
	.reg .pred 	%p<4>;
	.reg .b16 	%rs<4>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd4, [_Z27device_ping_kernel_volatilePVhPl_param_0];
	ld.param.u64 	%rd5, [_Z27device_ping_kernel_volatilePVhPl_param_1];
	cvta.to.global.u64 	%rd1, %rd5;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB17_1:
	ld.volatile.global.u8 	%rs1, [%rd2];
	setp.eq.s16 	%p1, %rs1, 1;
	@%p1 bra 	$L__BB17_1;

	// begin inline asm
	mov.u64 	%rd6, %clock64;
	// end inline asm
	mov.u32 	%r4, 0;

$L__BB17_3:
	ld.volatile.global.u8 	%rs2, [%rd2];
	setp.eq.s16 	%p2, %rs2, 1;
	@%p2 bra 	$L__BB17_3;

	mov.u16 	%rs3, 1;
	st.volatile.global.u8 	[%rd2], %rs3;
	add.s32 	%r4, %r4, 1;
	setp.lt.u32 	%p3, %r4, 10000;
	@%p3 bra 	$L__BB17_3;

	// begin inline asm
	mov.u64 	%rd7, %clock64;
	// end inline asm
	sub.s64 	%rd8, %rd7, %rd6;
	st.global.u64 	[%rd1], %rd8;
	ret;

}
	// .globl	_Z24device_write_kernel_flatPd
.visible .entry _Z24device_write_kernel_flatPd(
	.param .u64 _Z24device_write_kernel_flatPd_param_0
)
{
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<6>;


	ld.param.u64 	%rd1, [_Z24device_write_kernel_flatPd_param_0];
	cvta.to.global.u64 	%rd2, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %ctaid.x;
	mad.lo.s32 	%r4, %r2, %r3, %r1;
	mul.wide.u32 	%rd3, %r4, 8;
	add.s64 	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 0;
	st.global.u64 	[%rd4], %rd5;
	ret;

}
	// .globl	_Z23device_copy_kernel_flatPdS_
.visible .entry _Z23device_copy_kernel_flatPdS_(
	.param .u64 _Z23device_copy_kernel_flatPdS__param_0,
	.param .u64 _Z23device_copy_kernel_flatPdS__param_1
)
{
	.reg .b32 	%r<5>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [_Z23device_copy_kernel_flatPdS__param_0];
	ld.param.u64 	%rd2, [_Z23device_copy_kernel_flatPdS__param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %ctaid.x;
	mad.lo.s32 	%r4, %r2, %r3, %r1;
	mul.wide.u32 	%rd5, %r4, 8;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f64 	%fd1, [%rd6];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.f64 	[%rd7], %fd1;
	ret;

}
	// .globl	_Z27device_read_kernel_detailedPdmmPl
.visible .entry _Z27device_read_kernel_detailedPdmmPl(
	.param .u64 _Z27device_read_kernel_detailedPdmmPl_param_0,
	.param .u64 _Z27device_read_kernel_detailedPdmmPl_param_1,
	.param .u64 _Z27device_read_kernel_detailedPdmmPl_param_2,
	.param .u64 _Z27device_read_kernel_detailedPdmmPl_param_3
)
{
	.reg .pred 	%p<23>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<75>;
	// demoted variable
	.shared .align 8 .b8 _ZZ27device_read_kernel_detailedPdmmPlE12times_vector[8192];

	ld.param.u64 	%rd36, [_Z27device_read_kernel_detailedPdmmPl_param_1];
	ld.param.u64 	%rd37, [_Z27device_read_kernel_detailedPdmmPl_param_2];
	ld.param.u64 	%rd38, [_Z27device_read_kernel_detailedPdmmPl_param_3];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mul.lo.s32 	%r3, %r2, %r1;
	mov.u32 	%r4, %tid.x;
	add.s32 	%r9, %r3, %r4;
	cvt.u64.u32 	%rd1, %r9;
	setp.eq.s64 	%p1, %rd37, 0;
	@%p1 bra 	$L__BB20_30;

	cvt.u32.u64 	%r10, %rd1;
	neg.s32 	%r5, %r3;
	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r12, %r2, %r11;
	cvt.u64.u32 	%rd2, %r12;
	shl.b32 	%r13, %r10, 3;
	mov.u32 	%r14, _ZZ27device_read_kernel_detailedPdmmPlE12times_vector;
	add.s32 	%r6, %r14, %r13;
	cvt.u64.u32 	%rd3, %r11;
	cvt.u64.u32 	%rd4, %r1;
	cvt.u64.u32 	%rd40, %r2;
	add.s64 	%rd5, %rd40, -2;
	add.s32 	%r15, %r2, -1;
	and.b32  	%r7, %r15, 3;
	cvt.u64.u32 	%rd41, %r7;
	not.b64 	%rd42, %rd41;
	add.s64 	%rd6, %rd42, %rd40;
	cvta.to.global.u64 	%rd7, %rd38;
	mov.u64 	%rd65, 0;

$L__BB20_2:
	setp.ne.s32 	%p2, %r10, 0;
	@%p2 bra 	$L__BB20_4;

	mov.u64 	%rd43, 0;
	st.shared.u64 	[_ZZ27device_read_kernel_detailedPdmmPlE12times_vector], %rd43;

$L__BB20_4:
	setp.eq.s32 	%p3, %r4, %r5;
	bar.sync 	0;
	@%p3 bra 	$L__BB20_7;
	bra.uni 	$L__BB20_5;

$L__BB20_7:
	// begin inline asm
	mov.u64 	%rd44, %clock64;
	// end inline asm
	add.s64 	%rd66, %rd44, 1979999;
	st.shared.u64 	[_ZZ27device_read_kernel_detailedPdmmPlE12times_vector], %rd66;
	bra.uni 	$L__BB20_8;

$L__BB20_5:
	ld.shared.u64 	%rd66, [_ZZ27device_read_kernel_detailedPdmmPlE12times_vector];
	setp.ne.s64 	%p4, %rd66, 0;
	@%p4 bra 	$L__BB20_8;
	bra.uni 	$L__BB20_6;

$L__BB20_8:
	// begin inline asm
	mov.u64 	%rd45, %clock64;
	// end inline asm
	setp.lt.u64 	%p5, %rd45, %rd66;
	@%p5 bra 	$L__BB20_8;

	setp.ge.u64 	%p6, %rd1, %rd36;
	@%p6 bra 	$L__BB20_19;

	mov.u64 	%rd67, %rd1;

$L__BB20_11:
	.pragma "nounroll";
	add.s64 	%rd13, %rd67, %rd2;
	setp.ge.u64 	%p7, %rd13, %rd36;
	@%p7 bra 	$L__BB20_19;

	add.s64 	%rd14, %rd13, %rd2;
	setp.ge.u64 	%p8, %rd14, %rd36;
	@%p8 bra 	$L__BB20_19;

	add.s64 	%rd15, %rd14, %rd2;
	setp.ge.u64 	%p9, %rd15, %rd36;
	@%p9 bra 	$L__BB20_19;

	add.s64 	%rd16, %rd15, %rd2;
	setp.ge.u64 	%p10, %rd16, %rd36;
	@%p10 bra 	$L__BB20_19;

	add.s64 	%rd17, %rd16, %rd2;
	setp.ge.u64 	%p11, %rd17, %rd36;
	@%p11 bra 	$L__BB20_19;

	add.s64 	%rd18, %rd17, %rd2;
	setp.ge.u64 	%p12, %rd18, %rd36;
	@%p12 bra 	$L__BB20_19;

	add.s64 	%rd19, %rd18, %rd2;
	setp.ge.u64 	%p13, %rd19, %rd36;
	@%p13 bra 	$L__BB20_19;

	add.s64 	%rd67, %rd19, %rd2;
	setp.lt.u64 	%p14, %rd67, %rd36;
	@%p14 bra 	$L__BB20_11;

$L__BB20_19:
	setp.ne.s32 	%p15, %r4, 0;
	// begin inline asm
	mov.u64 	%rd46, %clock64;
	// end inline asm
	sub.s64 	%rd47, %rd46, %rd66;
	st.shared.u64 	[%r6], %rd47;
	bar.sync 	0;
	@%p15 bra 	$L__BB20_29;

	setp.lt.u32 	%p16, %r2, 2;
	ld.shared.u64 	%rd74, [_ZZ27device_read_kernel_detailedPdmmPlE12times_vector];
	@%p16 bra 	$L__BB20_28;

	setp.lt.u64 	%p17, %rd5, 3;
	mov.u64 	%rd72, 1;
	@%p17 bra 	$L__BB20_24;

	mov.u64 	%rd72, 1;
	mov.u64 	%rd70, %rd6;

$L__BB20_23:
	cvt.u32.u64 	%r17, %rd72;
	shl.b32 	%r18, %r17, 3;
	add.s32 	%r20, %r14, %r18;
	ld.shared.u64 	%rd51, [%r20];
	max.s64 	%rd52, %rd74, %rd51;
	ld.shared.u64 	%rd53, [%r20+8];
	max.s64 	%rd54, %rd52, %rd53;
	ld.shared.u64 	%rd55, [%r20+16];
	max.s64 	%rd56, %rd54, %rd55;
	ld.shared.u64 	%rd57, [%r20+24];
	max.s64 	%rd74, %rd56, %rd57;
	add.s64 	%rd72, %rd72, 4;
	add.s64 	%rd70, %rd70, -4;
	setp.ne.s64 	%p18, %rd70, 0;
	@%p18 bra 	$L__BB20_23;

$L__BB20_24:
	setp.eq.s32 	%p19, %r7, 0;
	@%p19 bra 	$L__BB20_28;

	setp.eq.s32 	%p20, %r7, 1;
	cvt.u32.u64 	%r21, %rd72;
	shl.b32 	%r22, %r21, 3;
	add.s32 	%r8, %r14, %r22;
	ld.shared.u64 	%rd58, [%r8];
	max.s64 	%rd74, %rd74, %rd58;
	@%p20 bra 	$L__BB20_28;

	setp.eq.s32 	%p21, %r7, 2;
	ld.shared.u64 	%rd59, [%r8+8];
	max.s64 	%rd74, %rd74, %rd59;
	@%p21 bra 	$L__BB20_28;

	ld.shared.u64 	%rd60, [%r8+16];
	max.s64 	%rd74, %rd74, %rd60;

$L__BB20_28:
	mul.lo.s64 	%rd61, %rd65, %rd3;
	add.s64 	%rd62, %rd61, %rd4;
	shl.b64 	%rd63, %rd62, 3;
	add.s64 	%rd64, %rd7, %rd63;
	st.global.u64 	[%rd64], %rd74;

$L__BB20_29:
	add.s64 	%rd65, %rd65, 1;
	setp.lt.u64 	%p22, %rd65, %rd37;
	@%p22 bra 	$L__BB20_2;

$L__BB20_30:
	ret;

$L__BB20_6:
	bra.uni 	$L__BB20_6;

}
	// .globl	_Z18device_read_kernelPdm
.visible .entry _Z18device_read_kernelPdm(
	.param .u64 _Z18device_read_kernelPdm_param_0,
	.param .u64 _Z18device_read_kernelPdm_param_1
)
{
	.reg .pred 	%p<10>;
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd12, [_Z18device_read_kernelPdm_param_1];
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mad.lo.s32 	%r4, %r1, %r3, %r2;
	cvt.u64.u32 	%rd13, %r4;
	setp.ge.u64 	%p1, %rd13, %rd12;
	@%p1 bra 	$L__BB21_10;

	mov.u32 	%r5, %nctaid.x;
	mul.lo.s32 	%r6, %r1, %r5;
	cvt.u64.u32 	%rd2, %r6;

$L__BB21_2:
	.pragma "nounroll";
	add.s64 	%rd4, %rd13, %rd2;
	setp.ge.u64 	%p2, %rd4, %rd12;
	@%p2 bra 	$L__BB21_10;

	add.s64 	%rd5, %rd4, %rd2;
	setp.ge.u64 	%p3, %rd5, %rd12;
	@%p3 bra 	$L__BB21_10;

	add.s64 	%rd6, %rd5, %rd2;
	setp.ge.u64 	%p4, %rd6, %rd12;
	@%p4 bra 	$L__BB21_10;

	add.s64 	%rd7, %rd6, %rd2;
	setp.ge.u64 	%p5, %rd7, %rd12;
	@%p5 bra 	$L__BB21_10;

	add.s64 	%rd8, %rd7, %rd2;
	setp.ge.u64 	%p6, %rd8, %rd12;
	@%p6 bra 	$L__BB21_10;

	add.s64 	%rd9, %rd8, %rd2;
	setp.ge.u64 	%p7, %rd9, %rd12;
	@%p7 bra 	$L__BB21_10;

	add.s64 	%rd10, %rd9, %rd2;
	setp.ge.u64 	%p8, %rd10, %rd12;
	@%p8 bra 	$L__BB21_10;

	add.s64 	%rd13, %rd10, %rd2;
	setp.lt.u64 	%p9, %rd13, %rd12;
	@%p9 bra 	$L__BB21_2;

$L__BB21_10:
	ret;

}
	// .globl	_Z19device_write_kernelPdm
.visible .entry _Z19device_write_kernelPdm(
	.param .u64 _Z19device_write_kernelPdm_param_0,
	.param .u64 _Z19device_write_kernelPdm_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd6, [_Z19device_write_kernelPdm_param_0];
	ld.param.u64 	%rd7, [_Z19device_write_kernelPdm_param_1];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r2, %r1, %r3;
	cvt.u64.u32 	%rd11, %r4;
	setp.ge.u64 	%p1, %rd11, %rd7;
	@%p1 bra 	$L__BB22_3;

	mov.u32 	%r5, %nctaid.x;
	mul.lo.s32 	%r6, %r1, %r5;
	cvt.u64.u32 	%rd2, %r6;
	cvta.to.global.u64 	%rd3, %rd6;

$L__BB22_2:
	shl.b64 	%rd8, %rd11, 3;
	add.s64 	%rd9, %rd3, %rd8;
	mov.u64 	%rd10, 0;
	st.global.u64 	[%rd9], %rd10;
	add.s64 	%rd11, %rd11, %rd2;
	setp.lt.u64 	%p2, %rd11, %rd7;
	@%p2 bra 	$L__BB22_2;

$L__BB22_3:
	ret;

}
	// .globl	_Z18device_copy_kernelPdS_m
.visible .entry _Z18device_copy_kernelPdS_m(
	.param .u64 _Z18device_copy_kernelPdS_m_param_0,
	.param .u64 _Z18device_copy_kernelPdS_m_param_1,
	.param .u64 _Z18device_copy_kernelPdS_m_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<7>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd7, [_Z18device_copy_kernelPdS_m_param_0];
	ld.param.u64 	%rd8, [_Z18device_copy_kernelPdS_m_param_1];
	ld.param.u64 	%rd9, [_Z18device_copy_kernelPdS_m_param_2];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r2, %r1, %r3;
	cvt.u64.u32 	%rd13, %r4;
	setp.ge.u64 	%p1, %rd13, %rd9;
	@%p1 bra 	$L__BB23_3;

	mov.u32 	%r5, %nctaid.x;
	mul.lo.s32 	%r6, %r1, %r5;
	cvt.u64.u32 	%rd2, %r6;
	cvta.to.global.u64 	%rd3, %rd7;
	cvta.to.global.u64 	%rd4, %rd8;

$L__BB23_2:
	shl.b64 	%rd10, %rd13, 3;
	add.s64 	%rd11, %rd3, %rd10;
	ld.global.f64 	%fd1, [%rd11];
	add.s64 	%rd12, %rd4, %rd10;
	st.global.f64 	[%rd12], %fd1;
	add.s64 	%rd13, %rd13, %rd2;
	setp.lt.u64 	%p2, %rd13, %rd9;
	@%p2 bra 	$L__BB23_2;

$L__BB23_3:
	ret;

}
	// .globl	_Z23device_read_kernel_syncP10ulonglong4mmPlS1_
.visible .entry _Z23device_read_kernel_syncP10ulonglong4mmPlS1_(
	.param .u64 _Z23device_read_kernel_syncP10ulonglong4mmPlS1__param_0,
	.param .u64 _Z23device_read_kernel_syncP10ulonglong4mmPlS1__param_1,
	.param .u64 _Z23device_read_kernel_syncP10ulonglong4mmPlS1__param_2,
	.param .u64 _Z23device_read_kernel_syncP10ulonglong4mmPlS1__param_3,
	.param .u64 _Z23device_read_kernel_syncP10ulonglong4mmPlS1__param_4
)
{
	.local .align 8 .b8 	__local_depot24[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<24>;
	.reg .b32 	%r<53>;
	.reg .b64 	%rd<109>;
	// demoted variable
	.shared .align 8 .b8 _ZZ23device_read_kernel_syncP10ulonglong4mmPlS1_E6clocks[8192];

	mov.u64 	%SPL, __local_depot24;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd37, [_Z23device_read_kernel_syncP10ulonglong4mmPlS1__param_0];
	ld.param.u64 	%rd38, [_Z23device_read_kernel_syncP10ulonglong4mmPlS1__param_1];
	ld.param.u64 	%rd39, [_Z23device_read_kernel_syncP10ulonglong4mmPlS1__param_2];
	ld.param.u64 	%rd40, [_Z23device_read_kernel_syncP10ulonglong4mmPlS1__param_3];
	ld.param.u64 	%rd42, [_Z23device_read_kernel_syncP10ulonglong4mmPlS1__param_4];
	cvta.to.global.u64 	%rd1, %rd42;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r15, %r2, %r1, %r3;
	cvt.u64.u32 	%rd2, %r15;
	// begin inline asm
	mov.u32 %r13, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd43, %r13;
	// begin inline asm
	mov.u32 %r14, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd44, %r14;
	bfi.b64 	%rd3, %rd44, %rd43, 32, 32;
	setp.eq.s64 	%p1, %rd39, 0;
	@%p1 bra 	$L__BB24_33;

	add.s64 	%rd4, %rd3, 4;
	mov.u32 	%r16, %tid.y;
	add.s32 	%r4, %r3, %r16;
	mov.u32 	%r17, %tid.z;
	neg.s32 	%r5, %r17;
	mov.u32 	%r18, %nctaid.y;
	mov.u32 	%r19, %nctaid.x;
	mul.lo.s32 	%r20, %r19, %r18;
	mov.u32 	%r21, %nctaid.z;
	mul.lo.s32 	%r22, %r20, %r21;
	mov.u32 	%r23, %ctaid.y;
	add.s32 	%r24, %r1, %r23;
	mov.u32 	%r25, %ctaid.z;
	neg.s32 	%r26, %r25;
	setp.eq.s32 	%p2, %r24, %r26;
	mov.u32 	%r27, -2147483647;
	sub.s32 	%r28, %r27, %r22;
	selp.b32 	%r6, %r28, 1, %p2;
	shr.u64 	%rd5, %rd38, 2;
	shl.b32 	%r29, %r3, 3;
	mov.u32 	%r30, _ZZ23device_read_kernel_syncP10ulonglong4mmPlS1_E6clocks;
	add.s32 	%r7, %r30, %r29;
	mul.lo.s32 	%r31, %r2, %r19;
	cvt.u64.u32 	%rd6, %r31;
	cvt.u64.u32 	%rd7, %r19;
	cvt.u64.u32 	%rd8, %r1;
	cvt.u64.u32 	%rd47, %r2;
	add.s64 	%rd9, %rd47, -2;
	add.s32 	%r32, %r2, -1;
	and.b32  	%r8, %r32, 3;
	cvt.u64.u32 	%rd48, %r8;
	not.b64 	%rd49, %rd48;
	add.s64 	%rd10, %rd49, %rd47;
	cvta.to.global.u64 	%rd11, %rd40;
	cvta.to.global.u64 	%rd12, %rd37;
	mov.u64 	%rd96, 0;

$L__BB24_2:
	setp.ne.s64 	%p3, %rd3, 0;
	@%p3 bra 	$L__BB24_4;

	// begin inline asm
	trap;
	// end inline asm

$L__BB24_4:
	setp.ne.s32 	%p4, %r4, %r5;
	barrier.sync 	0;
	@%p4 bra 	$L__BB24_7;

	// begin inline asm
	atom.add.release.gpu.u32 %r33,[%rd4],%r6;
	// end inline asm

$L__BB24_6:
	// begin inline asm
	ld.acquire.gpu.u32 %r35,[%rd4];
	// end inline asm
	xor.b32  	%r36, %r35, %r33;
	setp.gt.s32 	%p5, %r36, -1;
	@%p5 bra 	$L__BB24_6;

$L__BB24_7:
	barrier.sync 	0;
	// begin inline asm
	mov.u64 %rd52, %globaltimer;
	// end inline asm
	add.s64 	%rd53, %rd52, 1000000;
	st.global.u64 	[%rd1], %rd53;
	@%p3 bra 	$L__BB24_9;

	// begin inline asm
	trap;
	// end inline asm

$L__BB24_9:
	barrier.sync 	0;
	@%p4 bra 	$L__BB24_12;

	// begin inline asm
	atom.add.release.gpu.u32 %r37,[%rd4],%r6;
	// end inline asm

$L__BB24_11:
	// begin inline asm
	ld.acquire.gpu.u32 %r39,[%rd4];
	// end inline asm
	xor.b32  	%r40, %r39, %r37;
	setp.gt.s32 	%p8, %r40, -1;
	@%p8 bra 	$L__BB24_11;

$L__BB24_12:
	barrier.sync 	0;
	bar.sync 	0;
	ld.global.u64 	%rd15, [%rd1];

$L__BB24_13:
	// begin inline asm
	mov.u64 %rd56, %globaltimer;
	// end inline asm
	setp.lt.s64 	%p9, %rd56, %rd15;
	@%p9 bra 	$L__BB24_13;

	setp.le.u64 	%p10, %rd5, %rd2;
	@%p10 bra 	$L__BB24_17;

	mov.u64 	%rd98, %rd2;

$L__BB24_16:
	shl.b64 	%rd57, %rd98, 5;
	add.s64 	%rd58, %rd12, %rd57;
	ld.global.v2.u64 	{%rd59, %rd60}, [%rd58];
	ld.global.v2.u64 	{%rd63, %rd64}, [%rd58+16];
	xor.b64  	%rd67, %rd60, %rd100;
	xor.b64  	%rd68, %rd67, %rd59;
	xor.b64  	%rd69, %rd68, %rd63;
	xor.b64  	%rd100, %rd69, %rd64;
	add.s64 	%rd98, %rd98, %rd6;
	setp.lt.u64 	%p11, %rd98, %rd5;
	@%p11 bra 	$L__BB24_16;

$L__BB24_17:
	// begin inline asm
	mov.u64 %rd70, %globaltimer;
	// end inline asm
	sub.s64 	%rd71, %rd70, %rd15;
	st.shared.u64 	[%r7], %rd71;
	@%p3 bra 	$L__BB24_19;

	// begin inline asm
	trap;
	// end inline asm

$L__BB24_19:
	barrier.sync 	0;
	@%p4 bra 	$L__BB24_22;

	// begin inline asm
	atom.add.release.gpu.u32 %r41,[%rd4],%r6;
	// end inline asm

$L__BB24_21:
	// begin inline asm
	ld.acquire.gpu.u32 %r43,[%rd4];
	// end inline asm
	xor.b32  	%r44, %r43, %r41;
	setp.gt.s32 	%p14, %r44, -1;
	@%p14 bra 	$L__BB24_21;

$L__BB24_22:
	setp.ne.s32 	%p15, %r3, 0;
	barrier.sync 	0;
	@%p15 bra 	$L__BB24_32;

	setp.lt.u32 	%p16, %r2, 2;
	ld.shared.u64 	%rd107, [_ZZ23device_read_kernel_syncP10ulonglong4mmPlS1_E6clocks];
	@%p16 bra 	$L__BB24_31;

	setp.lt.u64 	%p17, %rd9, 3;
	mov.u64 	%rd105, 1;
	@%p17 bra 	$L__BB24_27;

	mov.u64 	%rd105, 1;
	mov.u64 	%rd103, %rd10;

$L__BB24_26:
	cvt.u32.u64 	%r45, %rd105;
	shl.b32 	%r46, %r45, 3;
	add.s32 	%r48, %r30, %r46;
	ld.shared.u64 	%rd77, [%r48];
	max.s64 	%rd78, %rd107, %rd77;
	ld.shared.u64 	%rd79, [%r48+8];
	max.s64 	%rd80, %rd78, %rd79;
	ld.shared.u64 	%rd81, [%r48+16];
	max.s64 	%rd82, %rd80, %rd81;
	ld.shared.u64 	%rd83, [%r48+24];
	max.s64 	%rd107, %rd82, %rd83;
	add.s64 	%rd105, %rd105, 4;
	add.s64 	%rd103, %rd103, -4;
	setp.ne.s64 	%p18, %rd103, 0;
	@%p18 bra 	$L__BB24_26;

$L__BB24_27:
	setp.eq.s32 	%p19, %r8, 0;
	@%p19 bra 	$L__BB24_31;

	setp.eq.s32 	%p20, %r8, 1;
	cvt.u32.u64 	%r49, %rd105;
	shl.b32 	%r50, %r49, 3;
	add.s32 	%r12, %r30, %r50;
	ld.shared.u64 	%rd84, [%r12];
	max.s64 	%rd107, %rd107, %rd84;
	@%p20 bra 	$L__BB24_31;

	setp.eq.s32 	%p21, %r8, 2;
	ld.shared.u64 	%rd85, [%r12+8];
	max.s64 	%rd107, %rd107, %rd85;
	@%p21 bra 	$L__BB24_31;

	ld.shared.u64 	%rd86, [%r12+16];
	max.s64 	%rd107, %rd107, %rd86;

$L__BB24_31:
	mul.lo.s64 	%rd87, %rd96, %rd7;
	add.s64 	%rd88, %rd87, %rd8;
	shl.b64 	%rd89, %rd88, 3;
	add.s64 	%rd90, %rd11, %rd89;
	st.global.u64 	[%rd90], %rd107;

$L__BB24_32:
	add.s64 	%rd96, %rd96, 1;
	setp.lt.u64 	%p22, %rd96, %rd39;
	@%p22 bra 	$L__BB24_2;

$L__BB24_33:
	ld.global.u64 	%rd91, [%rd1];
	setp.ne.s64 	%p23, %rd91, 0;
	@%p23 bra 	$L__BB24_35;

	add.u64 	%rd92, %SP, 0;
	add.u64 	%rd93, %SPL, 0;
	st.local.u64 	[%rd93], %rd100;
	mov.u64 	%rd94, $str$2;
	cvta.global.u64 	%rd95, %rd94;
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd95;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd92;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r52, [retval0+0];
	} // callseq 1

$L__BB24_35:
	ret;

}
	// .globl	_Z24device_write_kernel_syncP10ulonglong2mmPlS1_
.visible .entry _Z24device_write_kernel_syncP10ulonglong2mmPlS1_(
	.param .u64 _Z24device_write_kernel_syncP10ulonglong2mmPlS1__param_0,
	.param .u64 _Z24device_write_kernel_syncP10ulonglong2mmPlS1__param_1,
	.param .u64 _Z24device_write_kernel_syncP10ulonglong2mmPlS1__param_2,
	.param .u64 _Z24device_write_kernel_syncP10ulonglong2mmPlS1__param_3,
	.param .u64 _Z24device_write_kernel_syncP10ulonglong2mmPlS1__param_4
)
{
	.reg .pred 	%p<23>;
	.reg .b32 	%r<52>;
	.reg .b64 	%rd<83>;
	// demoted variable
	.shared .align 8 .b8 _ZZ24device_write_kernel_syncP10ulonglong2mmPlS1_E6clocks[8192];

	ld.param.u64 	%rd32, [_Z24device_write_kernel_syncP10ulonglong2mmPlS1__param_0];
	ld.param.u64 	%rd33, [_Z24device_write_kernel_syncP10ulonglong2mmPlS1__param_1];
	ld.param.u64 	%rd34, [_Z24device_write_kernel_syncP10ulonglong2mmPlS1__param_2];
	ld.param.u64 	%rd35, [_Z24device_write_kernel_syncP10ulonglong2mmPlS1__param_3];
	ld.param.u64 	%rd36, [_Z24device_write_kernel_syncP10ulonglong2mmPlS1__param_4];
	cvta.to.global.u64 	%rd1, %rd36;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r15, %r2, %r1, %r3;
	cvt.u64.u32 	%rd2, %r15;
	// begin inline asm
	mov.u32 %r13, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd37, %r13;
	// begin inline asm
	mov.u32 %r14, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd38, %r14;
	bfi.b64 	%rd3, %rd38, %rd37, 32, 32;
	setp.eq.s64 	%p1, %rd34, 0;
	@%p1 bra 	$L__BB25_33;

	add.s64 	%rd4, %rd3, 4;
	mov.u32 	%r16, %tid.y;
	add.s32 	%r4, %r3, %r16;
	mov.u32 	%r17, %tid.z;
	neg.s32 	%r5, %r17;
	mov.u32 	%r18, %nctaid.y;
	mov.u32 	%r19, %nctaid.x;
	mul.lo.s32 	%r20, %r19, %r18;
	mov.u32 	%r21, %nctaid.z;
	mul.lo.s32 	%r22, %r20, %r21;
	mov.u32 	%r23, %ctaid.y;
	add.s32 	%r24, %r2, %r23;
	mov.u32 	%r25, %ctaid.z;
	neg.s32 	%r26, %r25;
	setp.eq.s32 	%p2, %r24, %r26;
	mov.u32 	%r27, -2147483647;
	sub.s32 	%r28, %r27, %r22;
	selp.b32 	%r6, %r28, 1, %p2;
	shr.u64 	%rd5, %rd33, 1;
	shl.b32 	%r29, %r3, 3;
	mov.u32 	%r30, _ZZ24device_write_kernel_syncP10ulonglong2mmPlS1_E6clocks;
	add.s32 	%r7, %r30, %r29;
	mul.lo.s32 	%r31, %r1, %r19;
	cvt.u64.u32 	%rd6, %r31;
	cvt.u64.u32 	%rd7, %r19;
	cvt.u64.u32 	%rd8, %r2;
	cvt.u64.u32 	%rd40, %r1;
	add.s64 	%rd9, %rd40, -2;
	add.s32 	%r32, %r1, -1;
	and.b32  	%r8, %r32, 3;
	cvt.u64.u32 	%rd41, %r8;
	not.b64 	%rd42, %rd41;
	add.s64 	%rd10, %rd42, %rd40;
	cvta.to.global.u64 	%rd11, %rd35;
	cvta.to.global.u64 	%rd12, %rd32;
	mov.u64 	%rd74, 0;

$L__BB25_2:
	setp.ne.s64 	%p3, %rd3, 0;
	@%p3 bra 	$L__BB25_4;

	// begin inline asm
	trap;
	// end inline asm

$L__BB25_4:
	setp.ne.s32 	%p4, %r4, %r5;
	barrier.sync 	0;
	@%p4 bra 	$L__BB25_7;

	// begin inline asm
	atom.add.release.gpu.u32 %r33,[%rd4],%r6;
	// end inline asm

$L__BB25_6:
	// begin inline asm
	ld.acquire.gpu.u32 %r35,[%rd4];
	// end inline asm
	xor.b32  	%r36, %r35, %r33;
	setp.gt.s32 	%p5, %r36, -1;
	@%p5 bra 	$L__BB25_6;

$L__BB25_7:
	barrier.sync 	0;
	// begin inline asm
	mov.u64 %rd45, %globaltimer;
	// end inline asm
	add.s64 	%rd46, %rd45, 1000000;
	st.global.u64 	[%rd1], %rd46;
	@%p3 bra 	$L__BB25_9;

	// begin inline asm
	trap;
	// end inline asm

$L__BB25_9:
	barrier.sync 	0;
	@%p4 bra 	$L__BB25_12;

	// begin inline asm
	atom.add.release.gpu.u32 %r37,[%rd4],%r6;
	// end inline asm

$L__BB25_11:
	// begin inline asm
	ld.acquire.gpu.u32 %r39,[%rd4];
	// end inline asm
	xor.b32  	%r40, %r39, %r37;
	setp.gt.s32 	%p8, %r40, -1;
	@%p8 bra 	$L__BB25_11;

$L__BB25_12:
	barrier.sync 	0;
	bar.sync 	0;
	ld.global.u64 	%rd14, [%rd1];

$L__BB25_13:
	// begin inline asm
	mov.u64 %rd49, %globaltimer;
	// end inline asm
	setp.lt.s64 	%p9, %rd49, %rd14;
	@%p9 bra 	$L__BB25_13;

	setp.le.u64 	%p10, %rd5, %rd2;
	@%p10 bra 	$L__BB25_17;

	mov.u64 	%rd75, %rd2;

$L__BB25_16:
	shl.b64 	%rd50, %rd75, 4;
	add.s64 	%rd51, %rd12, %rd50;
	mov.u64 	%rd52, 0;
	st.global.v2.u64 	[%rd51], {%rd52, %rd52};
	add.s64 	%rd75, %rd75, %rd6;
	setp.lt.u64 	%p11, %rd75, %rd5;
	@%p11 bra 	$L__BB25_16;

$L__BB25_17:
	// begin inline asm
	mov.u64 %rd53, %globaltimer;
	// end inline asm
	sub.s64 	%rd54, %rd53, %rd14;
	st.shared.u64 	[%r7], %rd54;
	@%p3 bra 	$L__BB25_19;

	// begin inline asm
	trap;
	// end inline asm

$L__BB25_19:
	barrier.sync 	0;
	@%p4 bra 	$L__BB25_22;

	// begin inline asm
	atom.add.release.gpu.u32 %r41,[%rd4],%r6;
	// end inline asm

$L__BB25_21:
	// begin inline asm
	ld.acquire.gpu.u32 %r43,[%rd4];
	// end inline asm
	xor.b32  	%r44, %r43, %r41;
	setp.gt.s32 	%p14, %r44, -1;
	@%p14 bra 	$L__BB25_21;

$L__BB25_22:
	setp.ne.s32 	%p15, %r3, 0;
	barrier.sync 	0;
	@%p15 bra 	$L__BB25_32;

	setp.lt.u32 	%p16, %r1, 2;
	ld.shared.u64 	%rd82, [_ZZ24device_write_kernel_syncP10ulonglong2mmPlS1_E6clocks];
	@%p16 bra 	$L__BB25_31;

	setp.lt.u64 	%p17, %rd9, 3;
	mov.u64 	%rd80, 1;
	@%p17 bra 	$L__BB25_27;

	mov.u64 	%rd80, 1;
	mov.u64 	%rd78, %rd10;

$L__BB25_26:
	cvt.u32.u64 	%r45, %rd80;
	shl.b32 	%r46, %r45, 3;
	add.s32 	%r48, %r30, %r46;
	ld.shared.u64 	%rd60, [%r48];
	max.s64 	%rd61, %rd82, %rd60;
	ld.shared.u64 	%rd62, [%r48+8];
	max.s64 	%rd63, %rd61, %rd62;
	ld.shared.u64 	%rd64, [%r48+16];
	max.s64 	%rd65, %rd63, %rd64;
	ld.shared.u64 	%rd66, [%r48+24];
	max.s64 	%rd82, %rd65, %rd66;
	add.s64 	%rd80, %rd80, 4;
	add.s64 	%rd78, %rd78, -4;
	setp.ne.s64 	%p18, %rd78, 0;
	@%p18 bra 	$L__BB25_26;

$L__BB25_27:
	setp.eq.s32 	%p19, %r8, 0;
	@%p19 bra 	$L__BB25_31;

	setp.eq.s32 	%p20, %r8, 1;
	cvt.u32.u64 	%r49, %rd80;
	shl.b32 	%r50, %r49, 3;
	add.s32 	%r12, %r30, %r50;
	ld.shared.u64 	%rd67, [%r12];
	max.s64 	%rd82, %rd82, %rd67;
	@%p20 bra 	$L__BB25_31;

	setp.eq.s32 	%p21, %r8, 2;
	ld.shared.u64 	%rd68, [%r12+8];
	max.s64 	%rd82, %rd82, %rd68;
	@%p21 bra 	$L__BB25_31;

	ld.shared.u64 	%rd69, [%r12+16];
	max.s64 	%rd82, %rd82, %rd69;

$L__BB25_31:
	mul.lo.s64 	%rd70, %rd74, %rd7;
	add.s64 	%rd71, %rd70, %rd8;
	shl.b64 	%rd72, %rd71, 3;
	add.s64 	%rd73, %rd11, %rd72;
	st.global.u64 	[%rd73], %rd82;

$L__BB25_32:
	add.s64 	%rd74, %rd74, 1;
	setp.lt.u64 	%p22, %rd74, %rd34;
	@%p22 bra 	$L__BB25_2;

$L__BB25_33:
	ret;

}
	// .globl	_Z33device_write_kernel_time_analysisPdmmPlS0_S0_
.visible .entry _Z33device_write_kernel_time_analysisPdmmPlS0_S0_(
	.param .u64 _Z33device_write_kernel_time_analysisPdmmPlS0_S0__param_0,
	.param .u64 _Z33device_write_kernel_time_analysisPdmmPlS0_S0__param_1,
	.param .u64 _Z33device_write_kernel_time_analysisPdmmPlS0_S0__param_2,
	.param .u64 _Z33device_write_kernel_time_analysisPdmmPlS0_S0__param_3,
	.param .u64 _Z33device_write_kernel_time_analysisPdmmPlS0_S0__param_4,
	.param .u64 _Z33device_write_kernel_time_analysisPdmmPlS0_S0__param_5
)
{
	.reg .pred 	%p<16>;
	.reg .b32 	%r<39>;
	.reg .b64 	%rd<48>;


	ld.param.u64 	%rd17, [_Z33device_write_kernel_time_analysisPdmmPlS0_S0__param_0];
	ld.param.u64 	%rd18, [_Z33device_write_kernel_time_analysisPdmmPlS0_S0__param_1];
	ld.param.u64 	%rd19, [_Z33device_write_kernel_time_analysisPdmmPlS0_S0__param_2];
	ld.param.u64 	%rd20, [_Z33device_write_kernel_time_analysisPdmmPlS0_S0__param_3];
	ld.param.u64 	%rd21, [_Z33device_write_kernel_time_analysisPdmmPlS0_S0__param_4];
	ld.param.u64 	%rd22, [_Z33device_write_kernel_time_analysisPdmmPlS0_S0__param_5];
	cvta.to.global.u64 	%rd1, %rd22;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r12, %r2, %r1, %r3;
	cvt.u64.u32 	%rd2, %r12;
	// begin inline asm
	mov.u32 %r10, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd23, %r10;
	// begin inline asm
	mov.u32 %r11, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd24, %r11;
	bfi.b64 	%rd3, %rd24, %rd23, 32, 32;
	setp.eq.s64 	%p1, %rd19, 0;
	@%p1 bra 	$L__BB26_23;

	add.s64 	%rd4, %rd3, 4;
	mov.u32 	%r13, %tid.y;
	add.s32 	%r4, %r3, %r13;
	mov.u32 	%r14, %tid.z;
	neg.s32 	%r5, %r14;
	mov.u32 	%r15, %nctaid.y;
	mov.u32 	%r16, %nctaid.x;
	mul.lo.s32 	%r17, %r16, %r15;
	mov.u32 	%r18, %nctaid.z;
	mul.lo.s32 	%r19, %r17, %r18;
	mov.u32 	%r20, %ctaid.y;
	add.s32 	%r21, %r2, %r20;
	mov.u32 	%r22, %ctaid.z;
	neg.s32 	%r23, %r22;
	setp.eq.s32 	%p2, %r21, %r23;
	mov.u32 	%r24, -2147483647;
	sub.s32 	%r25, %r24, %r19;
	selp.b32 	%r6, %r25, 1, %p2;
	mul.lo.s32 	%r26, %r1, %r16;
	cvt.u64.u32 	%rd5, %r26;
	mul.wide.u32 	%rd6, %r1, %r16;
	cvta.to.global.u64 	%rd7, %rd20;
	cvta.to.global.u64 	%rd8, %rd21;
	cvta.to.global.u64 	%rd9, %rd17;
	mov.u64 	%rd46, 0;

$L__BB26_2:
	setp.ne.s64 	%p3, %rd3, 0;
	@%p3 bra 	$L__BB26_4;

	// begin inline asm
	trap;
	// end inline asm

$L__BB26_4:
	setp.ne.s32 	%p4, %r4, %r5;
	barrier.sync 	0;
	@%p4 bra 	$L__BB26_7;

	// begin inline asm
	atom.add.release.gpu.u32 %r27,[%rd4],%r6;
	// end inline asm

$L__BB26_6:
	// begin inline asm
	ld.acquire.gpu.u32 %r29,[%rd4];
	// end inline asm
	xor.b32  	%r30, %r29, %r27;
	setp.gt.s32 	%p5, %r30, -1;
	@%p5 bra 	$L__BB26_6;

$L__BB26_7:
	barrier.sync 	0;
	// begin inline asm
	mov.u64 %rd28, %globaltimer;
	// end inline asm
	add.s64 	%rd29, %rd28, 1000000;
	st.global.u64 	[%rd1], %rd29;
	@%p3 bra 	$L__BB26_9;

	// begin inline asm
	trap;
	// end inline asm

$L__BB26_9:
	barrier.sync 	0;
	@%p4 bra 	$L__BB26_12;

	// begin inline asm
	atom.add.release.gpu.u32 %r31,[%rd4],%r6;
	// end inline asm

$L__BB26_11:
	// begin inline asm
	ld.acquire.gpu.u32 %r33,[%rd4];
	// end inline asm
	xor.b32  	%r34, %r33, %r31;
	setp.gt.s32 	%p8, %r34, -1;
	@%p8 bra 	$L__BB26_11;

$L__BB26_12:
	barrier.sync 	0;
	bar.sync 	0;
	ld.global.u64 	%rd11, [%rd1];

$L__BB26_13:
	// begin inline asm
	mov.u64 %rd32, %globaltimer;
	// end inline asm
	setp.lt.s64 	%p9, %rd32, %rd11;
	@%p9 bra 	$L__BB26_13;

	setp.ge.u64 	%p10, %rd2, %rd18;
	@%p10 bra 	$L__BB26_17;

	mov.u64 	%rd47, %rd2;

$L__BB26_16:
	shl.b64 	%rd33, %rd47, 3;
	add.s64 	%rd34, %rd9, %rd33;
	mov.u64 	%rd35, 0;
	st.global.u64 	[%rd34], %rd35;
	add.s64 	%rd47, %rd47, %rd5;
	setp.lt.u64 	%p11, %rd47, %rd18;
	@%p11 bra 	$L__BB26_16;

$L__BB26_17:
	// begin inline asm
	mov.u64 %rd36, %globaltimer;
	// end inline asm
	@%p3 bra 	$L__BB26_19;

	// begin inline asm
	trap;
	// end inline asm

$L__BB26_19:
	barrier.sync 	0;
	@%p4 bra 	$L__BB26_22;

	// begin inline asm
	atom.add.release.gpu.u32 %r35,[%rd4],%r6;
	// end inline asm

$L__BB26_21:
	// begin inline asm
	ld.acquire.gpu.u32 %r37,[%rd4];
	// end inline asm
	xor.b32  	%r38, %r37, %r35;
	setp.gt.s32 	%p14, %r38, -1;
	@%p14 bra 	$L__BB26_21;

$L__BB26_22:
	barrier.sync 	0;
	mul.lo.s64 	%rd39, %rd6, %rd46;
	add.s64 	%rd40, %rd39, %rd2;
	shl.b64 	%rd41, %rd40, 3;
	add.s64 	%rd42, %rd7, %rd41;
	sub.s64 	%rd43, %rd32, %rd11;
	st.global.u64 	[%rd42], %rd43;
	add.s64 	%rd44, %rd8, %rd41;
	sub.s64 	%rd45, %rd36, %rd11;
	st.global.u64 	[%rd44], %rd45;
	add.s64 	%rd46, %rd46, 1;
	setp.lt.u64 	%p15, %rd46, %rd19;
	@%p15 bra 	$L__BB26_2;

$L__BB26_23:
	ret;

}
	// .globl	_Z23device_copy_kernel_syncPdS_mmPlS0_
.visible .entry _Z23device_copy_kernel_syncPdS_mmPlS0_(
	.param .u64 _Z23device_copy_kernel_syncPdS_mmPlS0__param_0,
	.param .u64 _Z23device_copy_kernel_syncPdS_mmPlS0__param_1,
	.param .u64 _Z23device_copy_kernel_syncPdS_mmPlS0__param_2,
	.param .u64 _Z23device_copy_kernel_syncPdS_mmPlS0__param_3,
	.param .u64 _Z23device_copy_kernel_syncPdS_mmPlS0__param_4,
	.param .u64 _Z23device_copy_kernel_syncPdS_mmPlS0__param_5
)
{
	.reg .pred 	%p<23>;
	.reg .b32 	%r<52>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<84>;
	// demoted variable
	.shared .align 8 .b8 _ZZ23device_copy_kernel_syncPdS_mmPlS0_E6clocks[8192];

	ld.param.u64 	%rd32, [_Z23device_copy_kernel_syncPdS_mmPlS0__param_0];
	ld.param.u64 	%rd33, [_Z23device_copy_kernel_syncPdS_mmPlS0__param_1];
	ld.param.u64 	%rd34, [_Z23device_copy_kernel_syncPdS_mmPlS0__param_2];
	ld.param.u64 	%rd35, [_Z23device_copy_kernel_syncPdS_mmPlS0__param_3];
	ld.param.u64 	%rd36, [_Z23device_copy_kernel_syncPdS_mmPlS0__param_4];
	ld.param.u64 	%rd37, [_Z23device_copy_kernel_syncPdS_mmPlS0__param_5];
	cvta.to.global.u64 	%rd1, %rd37;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r15, %r2, %r1, %r3;
	cvt.u64.u32 	%rd2, %r15;
	// begin inline asm
	mov.u32 %r13, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd38, %r13;
	// begin inline asm
	mov.u32 %r14, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd39, %r14;
	bfi.b64 	%rd3, %rd39, %rd38, 32, 32;
	setp.eq.s64 	%p1, %rd35, 0;
	@%p1 bra 	$L__BB27_33;

	add.s64 	%rd4, %rd3, 4;
	mov.u32 	%r16, %tid.y;
	add.s32 	%r4, %r3, %r16;
	mov.u32 	%r17, %tid.z;
	neg.s32 	%r5, %r17;
	mov.u32 	%r18, %nctaid.y;
	mov.u32 	%r19, %nctaid.x;
	mul.lo.s32 	%r20, %r19, %r18;
	mov.u32 	%r21, %nctaid.z;
	mul.lo.s32 	%r22, %r20, %r21;
	mov.u32 	%r23, %ctaid.y;
	add.s32 	%r24, %r2, %r23;
	mov.u32 	%r25, %ctaid.z;
	neg.s32 	%r26, %r25;
	setp.eq.s32 	%p2, %r24, %r26;
	mov.u32 	%r27, -2147483647;
	sub.s32 	%r28, %r27, %r22;
	selp.b32 	%r6, %r28, 1, %p2;
	shl.b32 	%r29, %r3, 3;
	mov.u32 	%r30, _ZZ23device_copy_kernel_syncPdS_mmPlS0_E6clocks;
	add.s32 	%r7, %r30, %r29;
	mul.lo.s32 	%r31, %r1, %r19;
	cvt.u64.u32 	%rd5, %r31;
	cvt.u64.u32 	%rd6, %r19;
	cvt.u64.u32 	%rd7, %r2;
	cvt.u64.u32 	%rd41, %r1;
	add.s64 	%rd8, %rd41, -2;
	add.s32 	%r32, %r1, -1;
	and.b32  	%r8, %r32, 3;
	cvt.u64.u32 	%rd42, %r8;
	not.b64 	%rd43, %rd42;
	add.s64 	%rd9, %rd43, %rd41;
	cvta.to.global.u64 	%rd10, %rd36;
	cvta.to.global.u64 	%rd11, %rd32;
	cvta.to.global.u64 	%rd12, %rd33;
	mov.u64 	%rd75, 0;

$L__BB27_2:
	setp.ne.s64 	%p3, %rd3, 0;
	@%p3 bra 	$L__BB27_4;

	// begin inline asm
	trap;
	// end inline asm

$L__BB27_4:
	setp.ne.s32 	%p4, %r4, %r5;
	barrier.sync 	0;
	@%p4 bra 	$L__BB27_7;

	// begin inline asm
	atom.add.release.gpu.u32 %r33,[%rd4],%r6;
	// end inline asm

$L__BB27_6:
	// begin inline asm
	ld.acquire.gpu.u32 %r35,[%rd4];
	// end inline asm
	xor.b32  	%r36, %r35, %r33;
	setp.gt.s32 	%p5, %r36, -1;
	@%p5 bra 	$L__BB27_6;

$L__BB27_7:
	barrier.sync 	0;
	// begin inline asm
	mov.u64 %rd46, %globaltimer;
	// end inline asm
	add.s64 	%rd47, %rd46, 1000000;
	st.global.u64 	[%rd1], %rd47;
	@%p3 bra 	$L__BB27_9;

	// begin inline asm
	trap;
	// end inline asm

$L__BB27_9:
	barrier.sync 	0;
	@%p4 bra 	$L__BB27_12;

	// begin inline asm
	atom.add.release.gpu.u32 %r37,[%rd4],%r6;
	// end inline asm

$L__BB27_11:
	// begin inline asm
	ld.acquire.gpu.u32 %r39,[%rd4];
	// end inline asm
	xor.b32  	%r40, %r39, %r37;
	setp.gt.s32 	%p8, %r40, -1;
	@%p8 bra 	$L__BB27_11;

$L__BB27_12:
	barrier.sync 	0;
	bar.sync 	0;
	ld.global.u64 	%rd14, [%rd1];

$L__BB27_13:
	// begin inline asm
	mov.u64 %rd50, %globaltimer;
	// end inline asm
	setp.lt.s64 	%p9, %rd50, %rd14;
	@%p9 bra 	$L__BB27_13;

	setp.ge.u64 	%p10, %rd2, %rd34;
	@%p10 bra 	$L__BB27_17;

	mov.u64 	%rd76, %rd2;

$L__BB27_16:
	shl.b64 	%rd51, %rd76, 3;
	add.s64 	%rd52, %rd11, %rd51;
	ld.global.f64 	%fd1, [%rd52];
	add.s64 	%rd53, %rd12, %rd51;
	st.global.f64 	[%rd53], %fd1;
	add.s64 	%rd76, %rd76, %rd5;
	setp.lt.u64 	%p11, %rd76, %rd34;
	@%p11 bra 	$L__BB27_16;

$L__BB27_17:
	// begin inline asm
	mov.u64 %rd54, %globaltimer;
	// end inline asm
	sub.s64 	%rd55, %rd54, %rd14;
	st.shared.u64 	[%r7], %rd55;
	@%p3 bra 	$L__BB27_19;

	// begin inline asm
	trap;
	// end inline asm

$L__BB27_19:
	barrier.sync 	0;
	@%p4 bra 	$L__BB27_22;

	// begin inline asm
	atom.add.release.gpu.u32 %r41,[%rd4],%r6;
	// end inline asm

$L__BB27_21:
	// begin inline asm
	ld.acquire.gpu.u32 %r43,[%rd4];
	// end inline asm
	xor.b32  	%r44, %r43, %r41;
	setp.gt.s32 	%p14, %r44, -1;
	@%p14 bra 	$L__BB27_21;

$L__BB27_22:
	setp.ne.s32 	%p15, %r3, 0;
	barrier.sync 	0;
	@%p15 bra 	$L__BB27_32;

	setp.lt.u32 	%p16, %r1, 2;
	ld.shared.u64 	%rd83, [_ZZ23device_copy_kernel_syncPdS_mmPlS0_E6clocks];
	@%p16 bra 	$L__BB27_31;

	setp.lt.u64 	%p17, %rd8, 3;
	mov.u64 	%rd81, 1;
	@%p17 bra 	$L__BB27_27;

	mov.u64 	%rd81, 1;
	mov.u64 	%rd79, %rd9;

$L__BB27_26:
	cvt.u32.u64 	%r45, %rd81;
	shl.b32 	%r46, %r45, 3;
	add.s32 	%r48, %r30, %r46;
	ld.shared.u64 	%rd61, [%r48];
	max.s64 	%rd62, %rd83, %rd61;
	ld.shared.u64 	%rd63, [%r48+8];
	max.s64 	%rd64, %rd62, %rd63;
	ld.shared.u64 	%rd65, [%r48+16];
	max.s64 	%rd66, %rd64, %rd65;
	ld.shared.u64 	%rd67, [%r48+24];
	max.s64 	%rd83, %rd66, %rd67;
	add.s64 	%rd81, %rd81, 4;
	add.s64 	%rd79, %rd79, -4;
	setp.ne.s64 	%p18, %rd79, 0;
	@%p18 bra 	$L__BB27_26;

$L__BB27_27:
	setp.eq.s32 	%p19, %r8, 0;
	@%p19 bra 	$L__BB27_31;

	setp.eq.s32 	%p20, %r8, 1;
	cvt.u32.u64 	%r49, %rd81;
	shl.b32 	%r50, %r49, 3;
	add.s32 	%r12, %r30, %r50;
	ld.shared.u64 	%rd68, [%r12];
	max.s64 	%rd83, %rd83, %rd68;
	@%p20 bra 	$L__BB27_31;

	setp.eq.s32 	%p21, %r8, 2;
	ld.shared.u64 	%rd69, [%r12+8];
	max.s64 	%rd83, %rd83, %rd69;
	@%p21 bra 	$L__BB27_31;

	ld.shared.u64 	%rd70, [%r12+16];
	max.s64 	%rd83, %rd83, %rd70;

$L__BB27_31:
	mul.lo.s64 	%rd71, %rd75, %rd6;
	add.s64 	%rd72, %rd71, %rd7;
	shl.b64 	%rd73, %rd72, 3;
	add.s64 	%rd74, %rd10, %rd73;
	st.global.u64 	[%rd74], %rd83;

$L__BB27_32:
	add.s64 	%rd75, %rd75, 1;
	setp.lt.u64 	%p22, %rd75, %rd35;
	@%p22 bra 	$L__BB27_2;

$L__BB27_33:
	ret;

}
	// .globl	_Z24device_read_kernel_blockPmmmPl
.visible .entry _Z24device_read_kernel_blockPmmmPl(
	.param .u64 _Z24device_read_kernel_blockPmmmPl_param_0,
	.param .u64 _Z24device_read_kernel_blockPmmmPl_param_1,
	.param .u64 _Z24device_read_kernel_blockPmmmPl_param_2,
	.param .u64 _Z24device_read_kernel_blockPmmmPl_param_3
)
{
	.local .align 16 .b8 	__local_depot28[80];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<24>;
	.reg .b32 	%r<29>;
	.reg .b64 	%rd<356>;
	// demoted variable
	.shared .align 8 .b8 _ZZ24device_read_kernel_blockPmmmPlE6clocks[8200];

	mov.u64 	%SPL, __local_depot28;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd136, [_Z24device_read_kernel_blockPmmmPl_param_0];
	ld.param.u64 	%rd133, [_Z24device_read_kernel_blockPmmmPl_param_1];
	ld.param.u64 	%rd134, [_Z24device_read_kernel_blockPmmmPl_param_2];
	ld.param.u64 	%rd135, [_Z24device_read_kernel_blockPmmmPl_param_3];
	cvta.to.global.u64 	%rd1, %rd136;
	add.u64 	%rd2, %SPL, 0;
	mov.u32 	%r5, %ctaid.x;
	setp.eq.s32 	%p1, %r5, 0;
	@%p1 bra 	$L__BB28_2;

	mov.u64 	%rd138, $str$3;
	cvta.global.u64 	%rd139, %rd138;
	mov.u64 	%rd140, $str$4;
	cvta.global.u64 	%rd141, %rd140;
	mov.u64 	%rd142, __unnamed_1;
	cvta.global.u64 	%rd143, %rd142;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd139;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd141;
	.param .b32 param2;
	st.param.b32 	[param2+0], 293;
	.param .b64 param3;
	st.param.b64 	[param3+0], %rd143;
	.param .b64 param4;
	st.param.b64 	[param4+0], 1;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 2

$L__BB28_2:
	mov.u32 	%r6, %tid.x;
	cvt.u64.u32 	%rd3, %r6;
	shr.u64 	%rd4, %rd133, 10;
	setp.ge.u64 	%p2, %rd3, %rd133;
	@%p2 bra 	$L__BB28_6;

	mov.u64 	%rd285, %rd3;

$L__BB28_4:
	shl.b64 	%rd146, %rd285, 3;
	add.s64 	%rd147, %rd1, %rd146;
	ld.global.u64 	%rd148, [%rd147];
	xor.b64  	%rd333, %rd333, %rd148;
	add.s64 	%rd285, %rd285, 1024;
	setp.lt.u64 	%p3, %rd285, %rd133;
	@%p3 bra 	$L__BB28_4;

	st.local.u64 	[%rd2], %rd333;

$L__BB28_6:
	cvt.u32.u64 	%r7, %rd3;
	shl.b32 	%r8, %r7, 3;
	mov.u32 	%r9, _ZZ24device_read_kernel_blockPmmmPlE6clocks;
	add.s32 	%r1, %r9, %r8;
	setp.eq.s64 	%p4, %rd134, 0;
	@%p4 bra 	$L__BB28_34;

	mov.u32 	%r2, %ntid.x;
	cvt.u64.u32 	%rd151, %r2;
	add.s64 	%rd11, %rd4, -1;
	shr.u64 	%rd152, %rd11, 3;
	add.s64 	%rd153, %rd152, 1;
	add.s64 	%rd12, %rd151, -2;
	and.b64  	%rd13, %rd153, 3;
	add.s32 	%r10, %r2, -1;
	and.b32  	%r3, %r10, 3;
	cvt.u64.u32 	%rd154, %r3;
	not.b64 	%rd155, %rd154;
	add.s64 	%rd14, %rd155, %rd151;
	add.s64 	%rd156, %rd13, -1;
	sub.s64 	%rd15, %rd156, %rd152;
	shl.b64 	%rd157, %rd3, 3;
	add.s64 	%rd158, %rd1, %rd157;
	add.s64 	%rd16, %rd158, 128;
	cvta.to.global.u64 	%rd17, %rd135;
	mov.u64 	%rd295, 0;

$L__BB28_8:
	cvt.u32.u64 	%r22, %rd3;
	setp.ne.s32 	%p5, %r22, 0;
	bar.sync 	0;
	@%p5 bra 	$L__BB28_10;

	// begin inline asm
	mov.u64 	%rd159, %clock64;
	// end inline asm
	add.s64 	%rd160, %rd159, 19799997;
	st.shared.u64 	[_ZZ24device_read_kernel_blockPmmmPlE6clocks+8192], %rd160;

$L__BB28_10:
	bar.sync 	0;
	ld.shared.u64 	%rd27, [_ZZ24device_read_kernel_blockPmmmPlE6clocks+8192];

$L__BB28_11:
	// begin inline asm
	mov.u64 	%rd161, %clock64;
	// end inline asm
	setp.lt.s64 	%p6, %rd161, %rd27;
	@%p6 bra 	$L__BB28_11;

	setp.eq.s64 	%p7, %rd4, 0;
	@%p7 bra 	$L__BB28_22;

	mov.u64 	%rd304, 0;

$L__BB28_14:
	mov.u64 	%rd332, 0;
	setp.lt.u64 	%p8, %rd11, 24;
	@%p8 bra 	$L__BB28_17;

	mov.u64 	%rd332, 0;
	mov.u64 	%rd305, %rd16;
	mov.u64 	%rd306, %rd15;

$L__BB28_16:
	ld.global.u64 	%rd166, [%rd305+-128];
	xor.b64  	%rd167, %rd333, %rd166;
	ld.global.u64 	%rd168, [%rd305+-120];
	xor.b64  	%rd169, %rd334, %rd168;
	ld.global.u64 	%rd170, [%rd305+-112];
	xor.b64  	%rd171, %rd335, %rd170;
	ld.global.u64 	%rd172, [%rd305+-104];
	xor.b64  	%rd173, %rd336, %rd172;
	ld.global.u64 	%rd174, [%rd305+-96];
	xor.b64  	%rd175, %rd337, %rd174;
	ld.global.u64 	%rd176, [%rd305+-88];
	xor.b64  	%rd177, %rd338, %rd176;
	ld.global.u64 	%rd178, [%rd305+-80];
	xor.b64  	%rd179, %rd339, %rd178;
	ld.global.u64 	%rd180, [%rd305+-72];
	xor.b64  	%rd181, %rd340, %rd180;
	ld.global.u64 	%rd182, [%rd305+-64];
	xor.b64  	%rd183, %rd167, %rd182;
	ld.global.u64 	%rd184, [%rd305+-56];
	xor.b64  	%rd185, %rd169, %rd184;
	ld.global.u64 	%rd186, [%rd305+-48];
	xor.b64  	%rd187, %rd171, %rd186;
	ld.global.u64 	%rd188, [%rd305+-40];
	xor.b64  	%rd189, %rd173, %rd188;
	ld.global.u64 	%rd190, [%rd305+-32];
	xor.b64  	%rd191, %rd175, %rd190;
	ld.global.u64 	%rd192, [%rd305+-24];
	xor.b64  	%rd193, %rd177, %rd192;
	ld.global.u64 	%rd194, [%rd305+-16];
	xor.b64  	%rd195, %rd179, %rd194;
	ld.global.u64 	%rd196, [%rd305+-8];
	xor.b64  	%rd197, %rd181, %rd196;
	ld.global.u64 	%rd198, [%rd305];
	xor.b64  	%rd199, %rd183, %rd198;
	ld.global.u64 	%rd200, [%rd305+8];
	xor.b64  	%rd201, %rd185, %rd200;
	ld.global.u64 	%rd202, [%rd305+16];
	xor.b64  	%rd203, %rd187, %rd202;
	ld.global.u64 	%rd204, [%rd305+24];
	xor.b64  	%rd205, %rd189, %rd204;
	ld.global.u64 	%rd206, [%rd305+32];
	xor.b64  	%rd207, %rd191, %rd206;
	ld.global.u64 	%rd208, [%rd305+40];
	xor.b64  	%rd209, %rd193, %rd208;
	ld.global.u64 	%rd210, [%rd305+48];
	xor.b64  	%rd211, %rd195, %rd210;
	ld.global.u64 	%rd212, [%rd305+56];
	xor.b64  	%rd213, %rd197, %rd212;
	ld.global.u64 	%rd214, [%rd305+64];
	xor.b64  	%rd333, %rd199, %rd214;
	ld.global.u64 	%rd215, [%rd305+72];
	xor.b64  	%rd334, %rd201, %rd215;
	ld.global.u64 	%rd216, [%rd305+80];
	xor.b64  	%rd335, %rd203, %rd216;
	ld.global.u64 	%rd217, [%rd305+88];
	xor.b64  	%rd336, %rd205, %rd217;
	ld.global.u64 	%rd218, [%rd305+96];
	xor.b64  	%rd337, %rd207, %rd218;
	ld.global.u64 	%rd219, [%rd305+104];
	xor.b64  	%rd338, %rd209, %rd219;
	ld.global.u64 	%rd220, [%rd305+112];
	xor.b64  	%rd339, %rd211, %rd220;
	ld.global.u64 	%rd221, [%rd305+120];
	xor.b64  	%rd340, %rd213, %rd221;
	add.s64 	%rd332, %rd332, 32;
	add.s64 	%rd305, %rd305, 256;
	add.s64 	%rd306, %rd306, 4;
	setp.ne.s64 	%p9, %rd306, 0;
	@%p9 bra 	$L__BB28_16;

$L__BB28_17:
	setp.eq.s64 	%p10, %rd13, 0;
	@%p10 bra 	$L__BB28_21;

	setp.eq.s64 	%p11, %rd13, 1;
	add.s64 	%rd222, %rd332, %rd3;
	shl.b64 	%rd223, %rd222, 3;
	add.s64 	%rd76, %rd1, %rd223;
	ld.global.u64 	%rd224, [%rd76];
	xor.b64  	%rd333, %rd333, %rd224;
	ld.global.u64 	%rd225, [%rd76+8];
	xor.b64  	%rd334, %rd334, %rd225;
	ld.global.u64 	%rd226, [%rd76+16];
	xor.b64  	%rd335, %rd335, %rd226;
	ld.global.u64 	%rd227, [%rd76+24];
	xor.b64  	%rd336, %rd336, %rd227;
	ld.global.u64 	%rd228, [%rd76+32];
	xor.b64  	%rd337, %rd337, %rd228;
	ld.global.u64 	%rd229, [%rd76+40];
	xor.b64  	%rd338, %rd338, %rd229;
	ld.global.u64 	%rd230, [%rd76+48];
	xor.b64  	%rd339, %rd339, %rd230;
	ld.global.u64 	%rd231, [%rd76+56];
	xor.b64  	%rd340, %rd340, %rd231;
	@%p11 bra 	$L__BB28_21;

	setp.eq.s64 	%p12, %rd13, 2;
	ld.global.u64 	%rd232, [%rd76+64];
	xor.b64  	%rd333, %rd333, %rd232;
	ld.global.u64 	%rd233, [%rd76+72];
	xor.b64  	%rd334, %rd334, %rd233;
	ld.global.u64 	%rd234, [%rd76+80];
	xor.b64  	%rd335, %rd335, %rd234;
	ld.global.u64 	%rd235, [%rd76+88];
	xor.b64  	%rd336, %rd336, %rd235;
	ld.global.u64 	%rd236, [%rd76+96];
	xor.b64  	%rd337, %rd337, %rd236;
	ld.global.u64 	%rd237, [%rd76+104];
	xor.b64  	%rd338, %rd338, %rd237;
	ld.global.u64 	%rd238, [%rd76+112];
	xor.b64  	%rd339, %rd339, %rd238;
	ld.global.u64 	%rd239, [%rd76+120];
	xor.b64  	%rd340, %rd340, %rd239;
	@%p12 bra 	$L__BB28_21;

	ld.global.u64 	%rd240, [%rd76+128];
	xor.b64  	%rd333, %rd333, %rd240;
	ld.global.u64 	%rd241, [%rd76+136];
	xor.b64  	%rd334, %rd334, %rd241;
	ld.global.u64 	%rd242, [%rd76+144];
	xor.b64  	%rd335, %rd335, %rd242;
	ld.global.u64 	%rd243, [%rd76+152];
	xor.b64  	%rd336, %rd336, %rd243;
	ld.global.u64 	%rd244, [%rd76+160];
	xor.b64  	%rd337, %rd337, %rd244;
	ld.global.u64 	%rd245, [%rd76+168];
	xor.b64  	%rd338, %rd338, %rd245;
	ld.global.u64 	%rd246, [%rd76+176];
	xor.b64  	%rd339, %rd339, %rd246;
	ld.global.u64 	%rd247, [%rd76+184];
	xor.b64  	%rd340, %rd340, %rd247;

$L__BB28_21:
	add.s64 	%rd304, %rd304, 1;
	setp.lt.u64 	%p13, %rd304, 8192;
	@%p13 bra 	$L__BB28_14;

$L__BB28_22:
	cvt.u32.u64 	%r21, %rd3;
	setp.ne.s32 	%p23, %r21, 0;
	// begin inline asm
	mov.u64 	%rd248, %clock64;
	// end inline asm
	st.shared.u64 	[%r1], %rd248;
	bar.sync 	0;
	@%p23 bra 	$L__BB28_32;

	setp.lt.u32 	%p15, %r2, 2;
	ld.shared.u64 	%rd355, [_ZZ24device_read_kernel_blockPmmmPlE6clocks];
	@%p15 bra 	$L__BB28_31;

	setp.lt.u64 	%p16, %rd12, 3;
	mov.u64 	%rd353, 1;
	@%p16 bra 	$L__BB28_27;

	mov.u64 	%rd353, 1;
	mov.u64 	%rd351, %rd14;

$L__BB28_26:
	cvt.u32.u64 	%r13, %rd353;
	shl.b32 	%r14, %r13, 3;
	add.s32 	%r16, %r9, %r14;
	ld.shared.u64 	%rd252, [%r16];
	max.s64 	%rd253, %rd355, %rd252;
	ld.shared.u64 	%rd254, [%r16+8];
	max.s64 	%rd255, %rd253, %rd254;
	ld.shared.u64 	%rd256, [%r16+16];
	max.s64 	%rd257, %rd255, %rd256;
	ld.shared.u64 	%rd258, [%r16+24];
	max.s64 	%rd355, %rd257, %rd258;
	add.s64 	%rd353, %rd353, 4;
	add.s64 	%rd351, %rd351, -4;
	setp.ne.s64 	%p17, %rd351, 0;
	@%p17 bra 	$L__BB28_26;

$L__BB28_27:
	setp.eq.s32 	%p18, %r3, 0;
	@%p18 bra 	$L__BB28_31;

	setp.eq.s32 	%p19, %r3, 1;
	cvt.u32.u64 	%r17, %rd353;
	shl.b32 	%r18, %r17, 3;
	add.s32 	%r4, %r9, %r18;
	ld.shared.u64 	%rd259, [%r4];
	max.s64 	%rd355, %rd355, %rd259;
	@%p19 bra 	$L__BB28_31;

	cvt.u32.u64 	%r25, %rd353;
	shl.b32 	%r24, %r25, 3;
	add.s32 	%r23, %r9, %r24;
	setp.eq.s32 	%p20, %r3, 2;
	ld.shared.u64 	%rd260, [%r23+8];
	max.s64 	%rd355, %rd355, %rd260;
	@%p20 bra 	$L__BB28_31;

	cvt.u32.u64 	%r28, %rd353;
	shl.b32 	%r27, %r28, 3;
	add.s32 	%r26, %r9, %r27;
	ld.shared.u64 	%rd261, [%r26+16];
	max.s64 	%rd355, %rd355, %rd261;

$L__BB28_31:
	sub.s64 	%rd262, %rd355, %rd27;
	shr.s64 	%rd263, %rd262, 63;
	shr.u64 	%rd264, %rd263, 51;
	add.s64 	%rd265, %rd262, %rd264;
	shr.s64 	%rd266, %rd265, 13;
	shl.b64 	%rd267, %rd295, 3;
	add.s64 	%rd268, %rd17, %rd267;
	st.global.u64 	[%rd268], %rd266;

$L__BB28_32:
	ld.param.u64 	%rd278, [_Z24device_read_kernel_blockPmmmPl_param_2];
	add.s64 	%rd295, %rd295, 1;
	setp.lt.u64 	%p21, %rd295, %rd278;
	@%p21 bra 	$L__BB28_8;

	add.u64 	%rd279, %SPL, 0;
	st.local.v2.u64 	[%rd279], {%rd333, %rd334};
	st.local.v2.u64 	[%rd279+16], {%rd335, %rd336};
	st.local.v2.u64 	[%rd279+32], {%rd337, %rd338};
	st.local.v2.u64 	[%rd279+48], {%rd339, %rd340};

$L__BB28_34:
	ld.shared.u64 	%rd269, [%r1];
	setp.ge.u64 	%p22, %rd269, %rd3;
	@%p22 bra 	$L__BB28_36;

	add.u64 	%rd281, %SPL, 0;
	shl.b64 	%rd270, %rd3, 3;
	and.b64  	%rd271, %rd270, 56;
	add.s64 	%rd272, %rd281, %rd271;
	ld.local.u64 	%rd273, [%rd272];
	add.u64 	%rd274, %SP, 64;
	add.u64 	%rd275, %SPL, 64;
	st.local.u64 	[%rd275], %rd273;
	mov.u64 	%rd276, $str$2;
	cvta.global.u64 	%rd277, %rd276;
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd277;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd274;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r20, [retval0+0];
	} // callseq 3

$L__BB28_36:
	ret;

}
	// .globl	_Z25device_write_kernel_blockPdmmPl
.visible .entry _Z25device_write_kernel_blockPdmmPl(
	.param .u64 _Z25device_write_kernel_blockPdmmPl_param_0,
	.param .u64 _Z25device_write_kernel_blockPdmmPl_param_1,
	.param .u64 _Z25device_write_kernel_blockPdmmPl_param_2,
	.param .u64 _Z25device_write_kernel_blockPdmmPl_param_3
)
{
	.reg .pred 	%p<14>;
	.reg .b32 	%r<21>;
	.reg .b64 	%rd<66>;
	// demoted variable
	.shared .align 8 .b8 _ZZ25device_write_kernel_blockPdmmPlE6clocks[8200];

	ld.param.u64 	%rd26, [_Z25device_write_kernel_blockPdmmPl_param_0];
	ld.param.u64 	%rd27, [_Z25device_write_kernel_blockPdmmPl_param_1];
	ld.param.u64 	%rd28, [_Z25device_write_kernel_blockPdmmPl_param_2];
	ld.param.u64 	%rd29, [_Z25device_write_kernel_blockPdmmPl_param_3];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r8, %r7, %r1, %r2;
	cvt.u64.u32 	%rd1, %r8;
	setp.eq.s64 	%p1, %rd28, 0;
	@%p1 bra 	$L__BB29_20;

	cvt.u32.u64 	%r3, %rd1;
	shl.b32 	%r9, %r2, 3;
	mov.u32 	%r10, _ZZ25device_write_kernel_blockPdmmPlE6clocks;
	add.s32 	%r4, %r10, %r9;
	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r12, %r1, %r11;
	cvt.u64.u32 	%rd2, %r12;
	cvt.u64.u32 	%rd31, %r1;
	add.s64 	%rd3, %rd31, -2;
	add.s32 	%r13, %r1, -1;
	and.b32  	%r5, %r13, 3;
	cvt.u64.u32 	%rd32, %r5;
	not.b64 	%rd33, %rd32;
	add.s64 	%rd4, %rd33, %rd31;
	cvta.to.global.u64 	%rd5, %rd29;
	cvta.to.global.u64 	%rd6, %rd26;
	mov.u64 	%rd57, 0;

$L__BB29_2:
	bar.sync 	0;
	setp.ne.s32 	%p2, %r3, 0;
	@%p2 bra 	$L__BB29_4;

	// begin inline asm
	mov.u64 	%rd34, %clock64;
	// end inline asm
	add.s64 	%rd35, %rd34, 19799997;
	st.shared.u64 	[_ZZ25device_write_kernel_blockPdmmPlE6clocks+8192], %rd35;

$L__BB29_4:
	bar.sync 	0;
	ld.shared.u64 	%rd8, [_ZZ25device_write_kernel_blockPdmmPlE6clocks+8192];

$L__BB29_5:
	// begin inline asm
	mov.u64 	%rd36, %clock64;
	// end inline asm
	setp.lt.s64 	%p3, %rd36, %rd8;
	@%p3 bra 	$L__BB29_5;

	setp.ge.u64 	%p4, %rd1, %rd27;
	@%p4 bra 	$L__BB29_9;

	mov.u64 	%rd58, %rd1;

$L__BB29_8:
	shl.b64 	%rd37, %rd58, 3;
	add.s64 	%rd38, %rd6, %rd37;
	mov.u64 	%rd39, 0;
	st.global.u64 	[%rd38], %rd39;
	add.s64 	%rd58, %rd58, %rd2;
	setp.lt.u64 	%p5, %rd58, %rd27;
	@%p5 bra 	$L__BB29_8;

$L__BB29_9:
	// begin inline asm
	mov.u64 	%rd40, %clock64;
	// end inline asm
	sub.s64 	%rd41, %rd40, %rd8;
	st.shared.u64 	[%r4], %rd41;
	bar.sync 	0;
	@%p2 bra 	$L__BB29_19;

	setp.lt.u32 	%p7, %r1, 2;
	ld.shared.u64 	%rd65, [_ZZ25device_write_kernel_blockPdmmPlE6clocks];
	@%p7 bra 	$L__BB29_18;

	setp.lt.u64 	%p8, %rd3, 3;
	mov.u64 	%rd63, 1;
	@%p8 bra 	$L__BB29_14;

	mov.u64 	%rd63, 1;
	mov.u64 	%rd61, %rd4;

$L__BB29_13:
	cvt.u32.u64 	%r14, %rd63;
	shl.b32 	%r15, %r14, 3;
	add.s32 	%r17, %r10, %r15;
	ld.shared.u64 	%rd45, [%r17];
	max.s64 	%rd46, %rd65, %rd45;
	ld.shared.u64 	%rd47, [%r17+8];
	max.s64 	%rd48, %rd46, %rd47;
	ld.shared.u64 	%rd49, [%r17+16];
	max.s64 	%rd50, %rd48, %rd49;
	ld.shared.u64 	%rd51, [%r17+24];
	max.s64 	%rd65, %rd50, %rd51;
	add.s64 	%rd63, %rd63, 4;
	add.s64 	%rd61, %rd61, -4;
	setp.ne.s64 	%p9, %rd61, 0;
	@%p9 bra 	$L__BB29_13;

$L__BB29_14:
	setp.eq.s32 	%p10, %r5, 0;
	@%p10 bra 	$L__BB29_18;

	setp.eq.s32 	%p11, %r5, 1;
	cvt.u32.u64 	%r18, %rd63;
	shl.b32 	%r19, %r18, 3;
	add.s32 	%r6, %r10, %r19;
	ld.shared.u64 	%rd52, [%r6];
	max.s64 	%rd65, %rd65, %rd52;
	@%p11 bra 	$L__BB29_18;

	setp.eq.s32 	%p12, %r5, 2;
	ld.shared.u64 	%rd53, [%r6+8];
	max.s64 	%rd65, %rd65, %rd53;
	@%p12 bra 	$L__BB29_18;

	ld.shared.u64 	%rd54, [%r6+16];
	max.s64 	%rd65, %rd65, %rd54;

$L__BB29_18:
	shl.b64 	%rd55, %rd57, 3;
	add.s64 	%rd56, %rd5, %rd55;
	st.global.u64 	[%rd56], %rd65;

$L__BB29_19:
	add.s64 	%rd57, %rd57, 1;
	setp.lt.u64 	%p13, %rd57, %rd28;
	@%p13 bra 	$L__BB29_2;

$L__BB29_20:
	ret;

}
	// .globl	_Z24device_copy_kernel_blockPdS_mmPl
.visible .entry _Z24device_copy_kernel_blockPdS_mmPl(
	.param .u64 _Z24device_copy_kernel_blockPdS_mmPl_param_0,
	.param .u64 _Z24device_copy_kernel_blockPdS_mmPl_param_1,
	.param .u64 _Z24device_copy_kernel_blockPdS_mmPl_param_2,
	.param .u64 _Z24device_copy_kernel_blockPdS_mmPl_param_3,
	.param .u64 _Z24device_copy_kernel_blockPdS_mmPl_param_4
)
{
	.reg .pred 	%p<14>;
	.reg .b32 	%r<21>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<68>;
	// demoted variable
	.shared .align 8 .b8 _ZZ24device_copy_kernel_blockPdS_mmPlE6clocks[8200];

	ld.param.u64 	%rd27, [_Z24device_copy_kernel_blockPdS_mmPl_param_0];
	ld.param.u64 	%rd28, [_Z24device_copy_kernel_blockPdS_mmPl_param_1];
	ld.param.u64 	%rd29, [_Z24device_copy_kernel_blockPdS_mmPl_param_2];
	ld.param.u64 	%rd30, [_Z24device_copy_kernel_blockPdS_mmPl_param_3];
	ld.param.u64 	%rd31, [_Z24device_copy_kernel_blockPdS_mmPl_param_4];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r8, %r7, %r1, %r2;
	cvt.u64.u32 	%rd1, %r8;
	setp.eq.s64 	%p1, %rd30, 0;
	@%p1 bra 	$L__BB30_20;

	cvt.u32.u64 	%r3, %rd1;
	shl.b32 	%r9, %r2, 3;
	mov.u32 	%r10, _ZZ24device_copy_kernel_blockPdS_mmPlE6clocks;
	add.s32 	%r4, %r10, %r9;
	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r12, %r1, %r11;
	cvt.u64.u32 	%rd2, %r12;
	cvt.u64.u32 	%rd33, %r1;
	add.s64 	%rd3, %rd33, -2;
	add.s32 	%r13, %r1, -1;
	and.b32  	%r5, %r13, 3;
	cvt.u64.u32 	%rd34, %r5;
	not.b64 	%rd35, %rd34;
	add.s64 	%rd4, %rd35, %rd33;
	cvta.to.global.u64 	%rd5, %rd31;
	cvta.to.global.u64 	%rd6, %rd27;
	cvta.to.global.u64 	%rd7, %rd28;
	mov.u64 	%rd59, 0;

$L__BB30_2:
	bar.sync 	0;
	setp.ne.s32 	%p2, %r3, 0;
	@%p2 bra 	$L__BB30_4;

	// begin inline asm
	mov.u64 	%rd36, %clock64;
	// end inline asm
	add.s64 	%rd37, %rd36, 19799997;
	st.shared.u64 	[_ZZ24device_copy_kernel_blockPdS_mmPlE6clocks+8192], %rd37;

$L__BB30_4:
	bar.sync 	0;
	ld.shared.u64 	%rd9, [_ZZ24device_copy_kernel_blockPdS_mmPlE6clocks+8192];

$L__BB30_5:
	// begin inline asm
	mov.u64 	%rd38, %clock64;
	// end inline asm
	setp.lt.s64 	%p3, %rd38, %rd9;
	@%p3 bra 	$L__BB30_5;

	setp.ge.u64 	%p4, %rd1, %rd29;
	@%p4 bra 	$L__BB30_9;

	mov.u64 	%rd60, %rd1;

$L__BB30_8:
	shl.b64 	%rd39, %rd60, 3;
	add.s64 	%rd40, %rd6, %rd39;
	ld.global.f64 	%fd1, [%rd40];
	add.s64 	%rd41, %rd7, %rd39;
	st.global.f64 	[%rd41], %fd1;
	add.s64 	%rd60, %rd60, %rd2;
	setp.lt.u64 	%p5, %rd60, %rd29;
	@%p5 bra 	$L__BB30_8;

$L__BB30_9:
	// begin inline asm
	mov.u64 	%rd42, %clock64;
	// end inline asm
	sub.s64 	%rd43, %rd42, %rd9;
	st.shared.u64 	[%r4], %rd43;
	bar.sync 	0;
	@%p2 bra 	$L__BB30_19;

	setp.lt.u32 	%p7, %r1, 2;
	ld.shared.u64 	%rd67, [_ZZ24device_copy_kernel_blockPdS_mmPlE6clocks];
	@%p7 bra 	$L__BB30_18;

	setp.lt.u64 	%p8, %rd3, 3;
	mov.u64 	%rd65, 1;
	@%p8 bra 	$L__BB30_14;

	mov.u64 	%rd65, 1;
	mov.u64 	%rd63, %rd4;

$L__BB30_13:
	cvt.u32.u64 	%r14, %rd65;
	shl.b32 	%r15, %r14, 3;
	add.s32 	%r17, %r10, %r15;
	ld.shared.u64 	%rd47, [%r17];
	max.s64 	%rd48, %rd67, %rd47;
	ld.shared.u64 	%rd49, [%r17+8];
	max.s64 	%rd50, %rd48, %rd49;
	ld.shared.u64 	%rd51, [%r17+16];
	max.s64 	%rd52, %rd50, %rd51;
	ld.shared.u64 	%rd53, [%r17+24];
	max.s64 	%rd67, %rd52, %rd53;
	add.s64 	%rd65, %rd65, 4;
	add.s64 	%rd63, %rd63, -4;
	setp.ne.s64 	%p9, %rd63, 0;
	@%p9 bra 	$L__BB30_13;

$L__BB30_14:
	setp.eq.s32 	%p10, %r5, 0;
	@%p10 bra 	$L__BB30_18;

	setp.eq.s32 	%p11, %r5, 1;
	cvt.u32.u64 	%r18, %rd65;
	shl.b32 	%r19, %r18, 3;
	add.s32 	%r6, %r10, %r19;
	ld.shared.u64 	%rd54, [%r6];
	max.s64 	%rd67, %rd67, %rd54;
	@%p11 bra 	$L__BB30_18;

	setp.eq.s32 	%p12, %r5, 2;
	ld.shared.u64 	%rd55, [%r6+8];
	max.s64 	%rd67, %rd67, %rd55;
	@%p12 bra 	$L__BB30_18;

	ld.shared.u64 	%rd56, [%r6+16];
	max.s64 	%rd67, %rd67, %rd56;

$L__BB30_18:
	shl.b64 	%rd57, %rd59, 3;
	add.s64 	%rd58, %rd5, %rd57;
	st.global.u64 	[%rd58], %rd67;

$L__BB30_19:
	add.s64 	%rd59, %rd59, 1;
	setp.lt.u64 	%p13, %rd59, %rd30;
	@%p13 bra 	$L__BB30_2;

$L__BB30_20:
	ret;

}
	// .globl	_Z25device_read_kernel_singlePmmmPVl
.visible .entry _Z25device_read_kernel_singlePmmmPVl(
	.param .u64 _Z25device_read_kernel_singlePmmmPVl_param_0,
	.param .u64 _Z25device_read_kernel_singlePmmmPVl_param_1,
	.param .u64 _Z25device_read_kernel_singlePmmmPVl_param_2,
	.param .u64 _Z25device_read_kernel_singlePmmmPVl_param_3
)
{
	.local .align 16 .b8 	__local_depot31[80];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<6>;
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<101>;


	mov.u64 	%SPL, __local_depot31;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd44, [_Z25device_read_kernel_singlePmmmPVl_param_0];
	ld.param.u64 	%rd45, [_Z25device_read_kernel_singlePmmmPVl_param_1];
	ld.param.u64 	%rd46, [_Z25device_read_kernel_singlePmmmPVl_param_2];
	ld.param.u64 	%rd47, [_Z25device_read_kernel_singlePmmmPVl_param_3];
	cvta.to.global.u64 	%rd1, %rd47;
	add.u64 	%rd2, %SPL, 0;
	setp.eq.s64 	%p1, %rd46, 0;
	@%p1 bra 	$L__BB31_9;

	add.u64 	%rd51, %SP, 64;
	add.u64 	%rd3, %SPL, 64;
	cvta.to.global.u64 	%rd4, %rd44;
	mov.u64 	%rd82, 0;

$L__BB31_2:
	// begin inline asm
	mov.u64 	%rd52, %clock64;
	// end inline asm
	setp.eq.s64 	%p2, %rd45, 0;
	@%p2 bra 	$L__BB31_6;

	mov.u64 	%rd92, 0;
	mov.u64 	%rd83, %rd4;

$L__BB31_4:
	ld.global.u64 	%rd54, [%rd83];
	xor.b64  	%rd100, %rd100, %rd54;
	ld.global.u64 	%rd55, [%rd83+8];
	xor.b64  	%rd99, %rd99, %rd55;
	ld.global.u64 	%rd56, [%rd83+16];
	xor.b64  	%rd98, %rd98, %rd56;
	ld.global.u64 	%rd57, [%rd83+24];
	xor.b64  	%rd97, %rd97, %rd57;
	ld.global.u64 	%rd58, [%rd83+32];
	xor.b64  	%rd96, %rd96, %rd58;
	ld.global.u64 	%rd59, [%rd83+40];
	xor.b64  	%rd95, %rd95, %rd59;
	ld.global.u64 	%rd60, [%rd83+48];
	xor.b64  	%rd94, %rd94, %rd60;
	ld.global.u64 	%rd61, [%rd83+56];
	xor.b64  	%rd93, %rd93, %rd61;
	add.s64 	%rd83, %rd83, 64;
	add.s64 	%rd92, %rd92, 8;
	setp.lt.u64 	%p3, %rd92, %rd45;
	@%p3 bra 	$L__BB31_4;

	st.local.v2.u64 	[%rd2], {%rd100, %rd99};
	st.local.v2.u64 	[%rd2+16], {%rd98, %rd97};
	st.local.v2.u64 	[%rd2+32], {%rd96, %rd95};
	st.local.v2.u64 	[%rd2+48], {%rd94, %rd93};

$L__BB31_6:
	// begin inline asm
	mov.u64 	%rd62, %clock64;
	// end inline asm
	sub.s64 	%rd63, %rd62, %rd52;
	shl.b64 	%rd64, %rd82, 3;
	add.s64 	%rd65, %rd1, %rd64;
	st.volatile.global.u64 	[%rd65], %rd63;
	ld.volatile.global.u64 	%rd66, [%rd1];
	setp.gt.s64 	%p4, %rd66, 7;
	@%p4 bra 	$L__BB31_8;

	ld.volatile.global.u64 	%rd67, [%rd1];
	shl.b64 	%rd68, %rd67, 3;
	add.s64 	%rd69, %rd2, %rd68;
	ld.local.u64 	%rd70, [%rd69];
	st.local.u64 	[%rd3], %rd70;
	mov.u64 	%rd71, $str$2;
	cvta.global.u64 	%rd72, %rd71;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd72;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd51;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r1, [retval0+0];
	} // callseq 4

$L__BB31_8:
	add.s64 	%rd82, %rd82, 1;
	setp.lt.u64 	%p5, %rd82, %rd46;
	@%p5 bra 	$L__BB31_2;

$L__BB31_9:
	ret;

}
	// .globl	_Z26device_write_kernel_singlePdmmPl
.visible .entry _Z26device_write_kernel_singlePdmmPl(
	.param .u64 _Z26device_write_kernel_singlePdmmPl_param_0,
	.param .u64 _Z26device_write_kernel_singlePdmmPl_param_1,
	.param .u64 _Z26device_write_kernel_singlePdmmPl_param_2,
	.param .u64 _Z26device_write_kernel_singlePdmmPl_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<24>;


	ld.param.u64 	%rd10, [_Z26device_write_kernel_singlePdmmPl_param_0];
	ld.param.u64 	%rd11, [_Z26device_write_kernel_singlePdmmPl_param_1];
	ld.param.u64 	%rd12, [_Z26device_write_kernel_singlePdmmPl_param_2];
	ld.param.u64 	%rd13, [_Z26device_write_kernel_singlePdmmPl_param_3];
	setp.eq.s64 	%p1, %rd12, 0;
	@%p1 bra 	$L__BB32_6;

	cvta.to.global.u64 	%rd1, %rd13;
	cvta.to.global.u64 	%rd2, %rd10;
	mov.u64 	%rd21, 0;

$L__BB32_2:
	// begin inline asm
	mov.u64 	%rd15, %clock64;
	// end inline asm
	setp.eq.s64 	%p2, %rd11, 0;
	@%p2 bra 	$L__BB32_5;

	mov.u64 	%rd23, 0;
	mov.u64 	%rd22, %rd2;

$L__BB32_4:
	cvt.rn.f64.u64 	%fd1, %rd23;
	st.global.f64 	[%rd22], %fd1;
	st.global.f64 	[%rd22+8], %fd1;
	st.global.f64 	[%rd22+16], %fd1;
	st.global.f64 	[%rd22+24], %fd1;
	st.global.f64 	[%rd22+32], %fd1;
	st.global.f64 	[%rd22+40], %fd1;
	st.global.f64 	[%rd22+48], %fd1;
	st.global.f64 	[%rd22+56], %fd1;
	add.s64 	%rd22, %rd22, 64;
	add.s64 	%rd23, %rd23, 8;
	setp.lt.u64 	%p3, %rd23, %rd11;
	@%p3 bra 	$L__BB32_4;

$L__BB32_5:
	// begin inline asm
	mov.u64 	%rd17, %clock64;
	// end inline asm
	sub.s64 	%rd18, %rd17, %rd15;
	shl.b64 	%rd19, %rd21, 3;
	add.s64 	%rd20, %rd1, %rd19;
	st.global.u64 	[%rd20], %rd18;
	add.s64 	%rd21, %rd21, 1;
	setp.lt.u64 	%p4, %rd21, %rd12;
	@%p4 bra 	$L__BB32_2;

$L__BB32_6:
	ret;

}
	// .globl	_Z25device_copy_kernel_singlePdS_mmPl
.visible .entry _Z25device_copy_kernel_singlePdS_mmPl(
	.param .u64 _Z25device_copy_kernel_singlePdS_mmPl_param_0,
	.param .u64 _Z25device_copy_kernel_singlePdS_mmPl_param_1,
	.param .u64 _Z25device_copy_kernel_singlePdS_mmPl_param_2,
	.param .u64 _Z25device_copy_kernel_singlePdS_mmPl_param_3,
	.param .u64 _Z25device_copy_kernel_singlePdS_mmPl_param_4
)
{
	.reg .pred 	%p<5>;
	.reg .f64 	%fd<9>;
	.reg .b64 	%rd<29>;


	ld.param.u64 	%rd13, [_Z25device_copy_kernel_singlePdS_mmPl_param_0];
	ld.param.u64 	%rd14, [_Z25device_copy_kernel_singlePdS_mmPl_param_1];
	ld.param.u64 	%rd15, [_Z25device_copy_kernel_singlePdS_mmPl_param_2];
	ld.param.u64 	%rd16, [_Z25device_copy_kernel_singlePdS_mmPl_param_3];
	ld.param.u64 	%rd17, [_Z25device_copy_kernel_singlePdS_mmPl_param_4];
	setp.eq.s64 	%p1, %rd16, 0;
	@%p1 bra 	$L__BB33_6;

	cvta.to.global.u64 	%rd1, %rd17;
	cvta.to.global.u64 	%rd2, %rd13;
	cvta.to.global.u64 	%rd3, %rd14;
	mov.u64 	%rd25, 0;

$L__BB33_2:
	// begin inline asm
	mov.u64 	%rd19, %clock64;
	// end inline asm
	setp.eq.s64 	%p2, %rd15, 0;
	@%p2 bra 	$L__BB33_5;

	mov.u64 	%rd28, 0;
	mov.u64 	%rd26, %rd2;
	mov.u64 	%rd27, %rd3;

$L__BB33_4:
	ld.global.f64 	%fd1, [%rd26];
	st.global.f64 	[%rd27], %fd1;
	ld.global.f64 	%fd2, [%rd26+8];
	st.global.f64 	[%rd27+8], %fd2;
	ld.global.f64 	%fd3, [%rd26+16];
	st.global.f64 	[%rd27+16], %fd3;
	ld.global.f64 	%fd4, [%rd26+24];
	st.global.f64 	[%rd27+24], %fd4;
	ld.global.f64 	%fd5, [%rd26+32];
	st.global.f64 	[%rd27+32], %fd5;
	ld.global.f64 	%fd6, [%rd26+40];
	st.global.f64 	[%rd27+40], %fd6;
	ld.global.f64 	%fd7, [%rd26+48];
	st.global.f64 	[%rd27+48], %fd7;
	ld.global.f64 	%fd8, [%rd26+56];
	st.global.f64 	[%rd27+56], %fd8;
	add.s64 	%rd27, %rd27, 64;
	add.s64 	%rd26, %rd26, 64;
	add.s64 	%rd28, %rd28, 8;
	setp.lt.u64 	%p3, %rd28, %rd15;
	@%p3 bra 	$L__BB33_4;

$L__BB33_5:
	// begin inline asm
	mov.u64 	%rd21, %clock64;
	// end inline asm
	sub.s64 	%rd22, %rd21, %rd19;
	shl.b64 	%rd23, %rd25, 3;
	add.s64 	%rd24, %rd1, %rd23;
	st.global.u64 	[%rd24], %rd22;
	add.s64 	%rd25, %rd25, 1;
	setp.lt.u64 	%p4, %rd25, %rd16;
	@%p4 bra 	$L__BB33_2;

$L__BB33_6:
	ret;

}
	// .globl	_Z14latency_kernelPhmmPd
.visible .entry _Z14latency_kernelPhmmPd(
	.param .u64 _Z14latency_kernelPhmmPd_param_0,
	.param .u64 _Z14latency_kernelPhmmPd_param_1,
	.param .u64 _Z14latency_kernelPhmmPd_param_2,
	.param .u64 _Z14latency_kernelPhmmPd_param_3
)
{
	.local .align 8 .b8 	__local_depot34[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<10>;
	.reg .b32 	%r<7>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<93>;


	mov.u64 	%SPL, __local_depot34;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd20, [_Z14latency_kernelPhmmPd_param_0];
	ld.param.u64 	%rd21, [_Z14latency_kernelPhmmPd_param_1];
	ld.param.u64 	%rd22, [_Z14latency_kernelPhmmPd_param_2];
	ld.param.u64 	%rd23, [_Z14latency_kernelPhmmPd_param_3];
	setp.eq.s64 	%p1, %rd22, 0;
	@%p1 bra 	$L__BB34_13;

	shr.u64 	%rd1, %rd21, 3;
	add.s64 	%rd2, %rd1, -1;
	and.b64  	%rd3, %rd1, 3;
	sub.s64 	%rd4, %rd3, %rd1;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r2;
	add.u64 	%rd25, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	cvta.to.global.u64 	%rd6, %rd23;
	mov.u64 	%rd87, 0;

$L__BB34_2:
	// begin inline asm
	mov.u64 	%rd26, %clock64;
	// end inline asm
	setp.eq.s64 	%p2, %rd1, 0;
	mov.u64 	%rd92, %rd20;
	@%p2 bra 	$L__BB34_10;

	setp.lt.u64 	%p3, %rd2, 3;
	mov.u64 	%rd92, %rd20;
	@%p3 bra 	$L__BB34_6;

	mov.u64 	%rd88, %rd4;
	mov.u64 	%rd92, %rd20;

$L__BB34_5:
	ld.u64 	%rd28, [%rd92];
	ld.u64 	%rd29, [%rd28];
	ld.u64 	%rd30, [%rd29];
	ld.u64 	%rd31, [%rd30];
	ld.u64 	%rd32, [%rd31];
	ld.u64 	%rd33, [%rd32];
	ld.u64 	%rd34, [%rd33];
	ld.u64 	%rd35, [%rd34];
	ld.u64 	%rd36, [%rd35];
	ld.u64 	%rd37, [%rd36];
	ld.u64 	%rd38, [%rd37];
	ld.u64 	%rd39, [%rd38];
	ld.u64 	%rd40, [%rd39];
	ld.u64 	%rd41, [%rd40];
	ld.u64 	%rd42, [%rd41];
	ld.u64 	%rd43, [%rd42];
	ld.u64 	%rd44, [%rd43];
	ld.u64 	%rd45, [%rd44];
	ld.u64 	%rd46, [%rd45];
	ld.u64 	%rd47, [%rd46];
	ld.u64 	%rd48, [%rd47];
	ld.u64 	%rd49, [%rd48];
	ld.u64 	%rd50, [%rd49];
	ld.u64 	%rd51, [%rd50];
	ld.u64 	%rd52, [%rd51];
	ld.u64 	%rd53, [%rd52];
	ld.u64 	%rd54, [%rd53];
	ld.u64 	%rd55, [%rd54];
	ld.u64 	%rd56, [%rd55];
	ld.u64 	%rd57, [%rd56];
	ld.u64 	%rd58, [%rd57];
	ld.u64 	%rd92, [%rd58];
	add.s64 	%rd88, %rd88, 4;
	setp.ne.s64 	%p4, %rd88, 0;
	@%p4 bra 	$L__BB34_5;

$L__BB34_6:
	setp.eq.s64 	%p5, %rd3, 0;
	@%p5 bra 	$L__BB34_10;

	setp.eq.s64 	%p6, %rd3, 1;
	ld.u64 	%rd59, [%rd92];
	ld.u64 	%rd60, [%rd59];
	ld.u64 	%rd61, [%rd60];
	ld.u64 	%rd62, [%rd61];
	ld.u64 	%rd63, [%rd62];
	ld.u64 	%rd64, [%rd63];
	ld.u64 	%rd65, [%rd64];
	ld.u64 	%rd92, [%rd65];
	@%p6 bra 	$L__BB34_10;

	setp.eq.s64 	%p7, %rd3, 2;
	ld.u64 	%rd66, [%rd92];
	ld.u64 	%rd67, [%rd66];
	ld.u64 	%rd68, [%rd67];
	ld.u64 	%rd69, [%rd68];
	ld.u64 	%rd70, [%rd69];
	ld.u64 	%rd71, [%rd70];
	ld.u64 	%rd72, [%rd71];
	ld.u64 	%rd92, [%rd72];
	@%p7 bra 	$L__BB34_10;

	ld.u64 	%rd73, [%rd92];
	ld.u64 	%rd74, [%rd73];
	ld.u64 	%rd75, [%rd74];
	ld.u64 	%rd76, [%rd75];
	ld.u64 	%rd77, [%rd76];
	ld.u64 	%rd78, [%rd77];
	ld.u64 	%rd79, [%rd78];
	ld.u64 	%rd92, [%rd79];

$L__BB34_10:
	// begin inline asm
	mov.u64 	%rd80, %clock64;
	// end inline asm
	sub.s64 	%rd81, %rd80, %rd26;
	cvt.rn.f64.s64 	%fd1, %rd81;
	shl.b64 	%rd82, %rd87, 3;
	add.s64 	%rd83, %rd6, %rd82;
	st.global.f64 	[%rd83], %fd1;
	setp.lt.s32 	%p8, %r1, 2;
	@%p8 bra 	$L__BB34_12;

	ld.u8 	%r5, [%rd92];
	st.local.u32 	[%rd5], %r5;
	mov.u64 	%rd84, $str$5;
	cvta.global.u64 	%rd85, %rd84;
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd85;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd25;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r6, [retval0+0];
	} // callseq 5

$L__BB34_12:
	add.s64 	%rd87, %rd87, 1;
	setp.lt.u64 	%p9, %rd87, %rd22;
	@%p9 bra 	$L__BB34_2;

$L__BB34_13:
	ret;

}
	// .globl	_Z20latency_write_kernelPhmmPd
.visible .entry _Z20latency_write_kernelPhmmPd(
	.param .u64 _Z20latency_write_kernelPhmmPd_param_0,
	.param .u64 _Z20latency_write_kernelPhmmPd_param_1,
	.param .u64 _Z20latency_write_kernelPhmmPd_param_2,
	.param .u64 _Z20latency_write_kernelPhmmPd_param_3
)
{
	.local .align 8 .b8 	__local_depot35[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<10>;
	.reg .b32 	%r<7>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<98>;


	mov.u64 	%SPL, __local_depot35;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd22, [_Z20latency_write_kernelPhmmPd_param_0];
	ld.param.u64 	%rd23, [_Z20latency_write_kernelPhmmPd_param_1];
	ld.param.u64 	%rd24, [_Z20latency_write_kernelPhmmPd_param_2];
	ld.param.u64 	%rd25, [_Z20latency_write_kernelPhmmPd_param_3];
	setp.eq.s64 	%p1, %rd24, 0;
	@%p1 bra 	$L__BB35_13;

	shr.u64 	%rd1, %rd23, 3;
	add.s64 	%rd2, %rd1, -1;
	and.b64  	%rd3, %rd1, 3;
	sub.s64 	%rd4, %rd1, %rd3;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r2;
	cvta.to.global.u64 	%rd6, %rd25;
	mov.u64 	%rd92, 0;

$L__BB35_2:
	// begin inline asm
	mov.u64 	%rd28, %clock64;
	// end inline asm
	setp.eq.s64 	%p2, %rd1, 0;
	mov.u64 	%rd97, %rd22;
	@%p2 bra 	$L__BB35_10;

	setp.lt.u64 	%p3, %rd2, 3;
	mov.u64 	%rd97, %rd22;
	@%p3 bra 	$L__BB35_6;

	mov.u64 	%rd97, %rd22;
	mov.u64 	%rd94, %rd4;

$L__BB35_5:
	ld.u64 	%rd30, [%rd97];
	st.u64 	[%rd30+8], %rd24;
	ld.u64 	%rd31, [%rd30];
	st.u64 	[%rd31+8], %rd24;
	ld.u64 	%rd32, [%rd31];
	st.u64 	[%rd32+8], %rd24;
	ld.u64 	%rd33, [%rd32];
	st.u64 	[%rd33+8], %rd24;
	ld.u64 	%rd34, [%rd33];
	st.u64 	[%rd34+8], %rd24;
	ld.u64 	%rd35, [%rd34];
	st.u64 	[%rd35+8], %rd24;
	ld.u64 	%rd36, [%rd35];
	st.u64 	[%rd36+8], %rd24;
	ld.u64 	%rd37, [%rd36];
	st.u64 	[%rd37+8], %rd24;
	ld.u64 	%rd38, [%rd37];
	st.u64 	[%rd38+8], %rd24;
	ld.u64 	%rd39, [%rd38];
	st.u64 	[%rd39+8], %rd24;
	ld.u64 	%rd40, [%rd39];
	st.u64 	[%rd40+8], %rd24;
	ld.u64 	%rd41, [%rd40];
	st.u64 	[%rd41+8], %rd24;
	ld.u64 	%rd42, [%rd41];
	st.u64 	[%rd42+8], %rd24;
	ld.u64 	%rd43, [%rd42];
	st.u64 	[%rd43+8], %rd24;
	ld.u64 	%rd44, [%rd43];
	st.u64 	[%rd44+8], %rd24;
	ld.u64 	%rd45, [%rd44];
	st.u64 	[%rd45+8], %rd24;
	ld.u64 	%rd46, [%rd45];
	st.u64 	[%rd46+8], %rd24;
	ld.u64 	%rd47, [%rd46];
	st.u64 	[%rd47+8], %rd24;
	ld.u64 	%rd48, [%rd47];
	st.u64 	[%rd48+8], %rd24;
	ld.u64 	%rd49, [%rd48];
	st.u64 	[%rd49+8], %rd24;
	ld.u64 	%rd50, [%rd49];
	st.u64 	[%rd50+8], %rd24;
	ld.u64 	%rd51, [%rd50];
	st.u64 	[%rd51+8], %rd24;
	ld.u64 	%rd52, [%rd51];
	st.u64 	[%rd52+8], %rd24;
	ld.u64 	%rd53, [%rd52];
	st.u64 	[%rd53+8], %rd24;
	ld.u64 	%rd54, [%rd53];
	st.u64 	[%rd54+8], %rd24;
	ld.u64 	%rd55, [%rd54];
	st.u64 	[%rd55+8], %rd24;
	ld.u64 	%rd56, [%rd55];
	st.u64 	[%rd56+8], %rd24;
	ld.u64 	%rd57, [%rd56];
	st.u64 	[%rd57+8], %rd24;
	ld.u64 	%rd58, [%rd57];
	st.u64 	[%rd58+8], %rd24;
	ld.u64 	%rd59, [%rd58];
	st.u64 	[%rd59+8], %rd24;
	ld.u64 	%rd60, [%rd59];
	st.u64 	[%rd60+8], %rd24;
	ld.u64 	%rd97, [%rd60];
	st.u64 	[%rd97+8], %rd24;
	add.s64 	%rd94, %rd94, -4;
	setp.ne.s64 	%p4, %rd94, 0;
	@%p4 bra 	$L__BB35_5;

$L__BB35_6:
	setp.eq.s64 	%p5, %rd3, 0;
	@%p5 bra 	$L__BB35_10;

	setp.eq.s64 	%p6, %rd3, 1;
	ld.u64 	%rd61, [%rd97];
	st.u64 	[%rd61+8], %rd24;
	ld.u64 	%rd62, [%rd61];
	st.u64 	[%rd62+8], %rd24;
	ld.u64 	%rd63, [%rd62];
	st.u64 	[%rd63+8], %rd24;
	ld.u64 	%rd64, [%rd63];
	st.u64 	[%rd64+8], %rd24;
	ld.u64 	%rd65, [%rd64];
	st.u64 	[%rd65+8], %rd24;
	ld.u64 	%rd66, [%rd65];
	st.u64 	[%rd66+8], %rd24;
	ld.u64 	%rd67, [%rd66];
	st.u64 	[%rd67+8], %rd24;
	ld.u64 	%rd97, [%rd67];
	st.u64 	[%rd97+8], %rd24;
	@%p6 bra 	$L__BB35_10;

	setp.eq.s64 	%p7, %rd3, 2;
	ld.u64 	%rd68, [%rd97];
	st.u64 	[%rd68+8], %rd24;
	ld.u64 	%rd69, [%rd68];
	st.u64 	[%rd69+8], %rd24;
	ld.u64 	%rd70, [%rd69];
	st.u64 	[%rd70+8], %rd24;
	ld.u64 	%rd71, [%rd70];
	st.u64 	[%rd71+8], %rd24;
	ld.u64 	%rd72, [%rd71];
	st.u64 	[%rd72+8], %rd24;
	ld.u64 	%rd73, [%rd72];
	st.u64 	[%rd73+8], %rd24;
	ld.u64 	%rd74, [%rd73];
	st.u64 	[%rd74+8], %rd24;
	ld.u64 	%rd97, [%rd74];
	st.u64 	[%rd97+8], %rd24;
	@%p7 bra 	$L__BB35_10;

	ld.u64 	%rd75, [%rd97];
	st.u64 	[%rd75+8], %rd24;
	ld.u64 	%rd76, [%rd75];
	st.u64 	[%rd76+8], %rd24;
	ld.u64 	%rd77, [%rd76];
	st.u64 	[%rd77+8], %rd24;
	ld.u64 	%rd78, [%rd77];
	st.u64 	[%rd78+8], %rd24;
	ld.u64 	%rd79, [%rd78];
	st.u64 	[%rd79+8], %rd24;
	ld.u64 	%rd80, [%rd79];
	st.u64 	[%rd80+8], %rd24;
	ld.u64 	%rd81, [%rd80];
	st.u64 	[%rd81+8], %rd24;
	ld.u64 	%rd97, [%rd81];
	st.u64 	[%rd97+8], %rd24;

$L__BB35_10:
	// begin inline asm
	mov.u64 	%rd82, %clock64;
	// end inline asm
	sub.s64 	%rd83, %rd82, %rd28;
	cvt.rn.f64.s64 	%fd1, %rd83;
	shl.b64 	%rd84, %rd92, 3;
	add.s64 	%rd85, %rd6, %rd84;
	st.global.f64 	[%rd85], %fd1;
	setp.lt.s32 	%p8, %r1, 2;
	@%p8 bra 	$L__BB35_12;

	add.u64 	%rd91, %SP, 0;
	add.u64 	%rd90, %SP, 0;
	add.u64 	%rd89, %SPL, 0;
	ld.u8 	%r5, [%rd97];
	st.local.u32 	[%rd89], %r5;
	mov.u64 	%rd86, $str$5;
	cvta.global.u64 	%rd87, %rd86;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd87;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd90;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r6, [retval0+0];
	} // callseq 6

$L__BB35_12:
	add.s64 	%rd92, %rd92, 1;
	setp.lt.u64 	%p9, %rd92, %rd24;
	@%p9 bra 	$L__BB35_2;

$L__BB35_13:
	ret;

}
	// .globl	_Z12cache_kernelPm
.visible .entry _Z12cache_kernelPm(
	.param .u64 _Z12cache_kernelPm_param_0
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<133>;


	ld.param.u64 	%rd1, [_Z12cache_kernelPm_param_0];
	mov.u32 	%r7, %ctaid.x;
	shl.b32 	%r8, %r7, 10;
	mov.u32 	%r9, %tid.x;
	add.s32 	%r16, %r8, %r9;
	mov.u32 	%r15, 0;

$L__BB36_1:
	mul.wide.s32 	%rd130, %r16, 8;
	add.s64 	%rd3, %rd1, %rd130;
	// begin inline asm
	ld.ca.u64 %rd2, [%rd3];
	// end inline asm
	xor.b64  	%rd5, %rd2, %rd3;
	// begin inline asm
	ld.ca.u64 %rd4, [%rd5];
	// end inline asm
	xor.b64  	%rd7, %rd4, %rd5;
	// begin inline asm
	ld.ca.u64 %rd6, [%rd7];
	// end inline asm
	xor.b64  	%rd9, %rd6, %rd7;
	// begin inline asm
	ld.ca.u64 %rd8, [%rd9];
	// end inline asm
	xor.b64  	%rd11, %rd8, %rd9;
	// begin inline asm
	ld.ca.u64 %rd10, [%rd11];
	// end inline asm
	xor.b64  	%rd13, %rd10, %rd11;
	// begin inline asm
	ld.ca.u64 %rd12, [%rd13];
	// end inline asm
	xor.b64  	%rd15, %rd12, %rd13;
	// begin inline asm
	ld.ca.u64 %rd14, [%rd15];
	// end inline asm
	xor.b64  	%rd17, %rd14, %rd15;
	// begin inline asm
	ld.ca.u64 %rd16, [%rd17];
	// end inline asm
	xor.b64  	%rd19, %rd16, %rd17;
	// begin inline asm
	ld.ca.u64 %rd18, [%rd19];
	// end inline asm
	xor.b64  	%rd21, %rd18, %rd19;
	// begin inline asm
	ld.ca.u64 %rd20, [%rd21];
	// end inline asm
	xor.b64  	%rd23, %rd20, %rd21;
	// begin inline asm
	ld.ca.u64 %rd22, [%rd23];
	// end inline asm
	xor.b64  	%rd25, %rd22, %rd23;
	// begin inline asm
	ld.ca.u64 %rd24, [%rd25];
	// end inline asm
	xor.b64  	%rd27, %rd24, %rd25;
	// begin inline asm
	ld.ca.u64 %rd26, [%rd27];
	// end inline asm
	xor.b64  	%rd29, %rd26, %rd27;
	// begin inline asm
	ld.ca.u64 %rd28, [%rd29];
	// end inline asm
	xor.b64  	%rd31, %rd28, %rd29;
	// begin inline asm
	ld.ca.u64 %rd30, [%rd31];
	// end inline asm
	xor.b64  	%rd33, %rd30, %rd31;
	// begin inline asm
	ld.ca.u64 %rd32, [%rd33];
	// end inline asm
	xor.b64  	%rd35, %rd32, %rd33;
	// begin inline asm
	ld.ca.u64 %rd34, [%rd35];
	// end inline asm
	xor.b64  	%rd37, %rd34, %rd35;
	// begin inline asm
	ld.ca.u64 %rd36, [%rd37];
	// end inline asm
	xor.b64  	%rd39, %rd36, %rd37;
	// begin inline asm
	ld.ca.u64 %rd38, [%rd39];
	// end inline asm
	xor.b64  	%rd41, %rd38, %rd39;
	// begin inline asm
	ld.ca.u64 %rd40, [%rd41];
	// end inline asm
	xor.b64  	%rd43, %rd40, %rd41;
	// begin inline asm
	ld.ca.u64 %rd42, [%rd43];
	// end inline asm
	xor.b64  	%rd45, %rd42, %rd43;
	// begin inline asm
	ld.ca.u64 %rd44, [%rd45];
	// end inline asm
	xor.b64  	%rd47, %rd44, %rd45;
	// begin inline asm
	ld.ca.u64 %rd46, [%rd47];
	// end inline asm
	xor.b64  	%rd49, %rd46, %rd47;
	// begin inline asm
	ld.ca.u64 %rd48, [%rd49];
	// end inline asm
	xor.b64  	%rd51, %rd48, %rd49;
	// begin inline asm
	ld.ca.u64 %rd50, [%rd51];
	// end inline asm
	xor.b64  	%rd53, %rd50, %rd51;
	// begin inline asm
	ld.ca.u64 %rd52, [%rd53];
	// end inline asm
	xor.b64  	%rd55, %rd52, %rd53;
	// begin inline asm
	ld.ca.u64 %rd54, [%rd55];
	// end inline asm
	xor.b64  	%rd57, %rd54, %rd55;
	// begin inline asm
	ld.ca.u64 %rd56, [%rd57];
	// end inline asm
	xor.b64  	%rd59, %rd56, %rd57;
	// begin inline asm
	ld.ca.u64 %rd58, [%rd59];
	// end inline asm
	xor.b64  	%rd61, %rd58, %rd59;
	// begin inline asm
	ld.ca.u64 %rd60, [%rd61];
	// end inline asm
	xor.b64  	%rd63, %rd60, %rd61;
	// begin inline asm
	ld.ca.u64 %rd62, [%rd63];
	// end inline asm
	xor.b64  	%rd65, %rd62, %rd63;
	// begin inline asm
	ld.ca.u64 %rd64, [%rd65];
	// end inline asm
	xor.b64  	%rd67, %rd64, %rd65;
	// begin inline asm
	ld.ca.u64 %rd66, [%rd67];
	// end inline asm
	xor.b64  	%rd69, %rd66, %rd67;
	// begin inline asm
	ld.ca.u64 %rd68, [%rd69];
	// end inline asm
	xor.b64  	%rd71, %rd68, %rd69;
	// begin inline asm
	ld.ca.u64 %rd70, [%rd71];
	// end inline asm
	xor.b64  	%rd73, %rd70, %rd71;
	// begin inline asm
	ld.ca.u64 %rd72, [%rd73];
	// end inline asm
	xor.b64  	%rd75, %rd72, %rd73;
	// begin inline asm
	ld.ca.u64 %rd74, [%rd75];
	// end inline asm
	xor.b64  	%rd77, %rd74, %rd75;
	// begin inline asm
	ld.ca.u64 %rd76, [%rd77];
	// end inline asm
	xor.b64  	%rd79, %rd76, %rd77;
	// begin inline asm
	ld.ca.u64 %rd78, [%rd79];
	// end inline asm
	xor.b64  	%rd81, %rd78, %rd79;
	// begin inline asm
	ld.ca.u64 %rd80, [%rd81];
	// end inline asm
	xor.b64  	%rd83, %rd80, %rd81;
	// begin inline asm
	ld.ca.u64 %rd82, [%rd83];
	// end inline asm
	xor.b64  	%rd85, %rd82, %rd83;
	// begin inline asm
	ld.ca.u64 %rd84, [%rd85];
	// end inline asm
	xor.b64  	%rd87, %rd84, %rd85;
	// begin inline asm
	ld.ca.u64 %rd86, [%rd87];
	// end inline asm
	xor.b64  	%rd89, %rd86, %rd87;
	// begin inline asm
	ld.ca.u64 %rd88, [%rd89];
	// end inline asm
	xor.b64  	%rd91, %rd88, %rd89;
	// begin inline asm
	ld.ca.u64 %rd90, [%rd91];
	// end inline asm
	xor.b64  	%rd93, %rd90, %rd91;
	// begin inline asm
	ld.ca.u64 %rd92, [%rd93];
	// end inline asm
	xor.b64  	%rd95, %rd92, %rd93;
	// begin inline asm
	ld.ca.u64 %rd94, [%rd95];
	// end inline asm
	xor.b64  	%rd97, %rd94, %rd95;
	// begin inline asm
	ld.ca.u64 %rd96, [%rd97];
	// end inline asm
	xor.b64  	%rd99, %rd96, %rd97;
	// begin inline asm
	ld.ca.u64 %rd98, [%rd99];
	// end inline asm
	xor.b64  	%rd101, %rd98, %rd99;
	// begin inline asm
	ld.ca.u64 %rd100, [%rd101];
	// end inline asm
	xor.b64  	%rd103, %rd100, %rd101;
	// begin inline asm
	ld.ca.u64 %rd102, [%rd103];
	// end inline asm
	xor.b64  	%rd105, %rd102, %rd103;
	// begin inline asm
	ld.ca.u64 %rd104, [%rd105];
	// end inline asm
	xor.b64  	%rd107, %rd104, %rd105;
	// begin inline asm
	ld.ca.u64 %rd106, [%rd107];
	// end inline asm
	xor.b64  	%rd109, %rd106, %rd107;
	// begin inline asm
	ld.ca.u64 %rd108, [%rd109];
	// end inline asm
	xor.b64  	%rd111, %rd108, %rd109;
	// begin inline asm
	ld.ca.u64 %rd110, [%rd111];
	// end inline asm
	xor.b64  	%rd113, %rd110, %rd111;
	// begin inline asm
	ld.ca.u64 %rd112, [%rd113];
	// end inline asm
	xor.b64  	%rd115, %rd112, %rd113;
	// begin inline asm
	ld.ca.u64 %rd114, [%rd115];
	// end inline asm
	xor.b64  	%rd117, %rd114, %rd115;
	// begin inline asm
	ld.ca.u64 %rd116, [%rd117];
	// end inline asm
	xor.b64  	%rd119, %rd116, %rd117;
	// begin inline asm
	ld.ca.u64 %rd118, [%rd119];
	// end inline asm
	xor.b64  	%rd121, %rd118, %rd119;
	// begin inline asm
	ld.ca.u64 %rd120, [%rd121];
	// end inline asm
	xor.b64  	%rd123, %rd120, %rd121;
	// begin inline asm
	ld.ca.u64 %rd122, [%rd123];
	// end inline asm
	xor.b64  	%rd125, %rd122, %rd123;
	// begin inline asm
	ld.ca.u64 %rd124, [%rd125];
	// end inline asm
	xor.b64  	%rd127, %rd124, %rd125;
	// begin inline asm
	ld.ca.u64 %rd126, [%rd127];
	// end inline asm
	xor.b64  	%rd129, %rd126, %rd127;
	// begin inline asm
	ld.ca.u64 %rd128, [%rd129];
	// end inline asm
	cvt.u32.u64 	%r10, %rd128;
	add.s32 	%r16, %r16, %r10;
	add.s32 	%r15, %r15, 1;
	setp.ne.s32 	%p1, %r15, 8192;
	@%p1 bra 	$L__BB36_1;

	mov.u32 	%r14, %ctaid.x;
	mov.u32 	%r13, %tid.x;
	shl.b32 	%r12, %r14, 10;
	add.s32 	%r11, %r12, %r13;
	setp.eq.s32 	%p2, %r16, %r11;
	@%p2 bra 	$L__BB36_4;

	cvta.to.global.u64 	%rd131, %rd1;
	cvt.s64.s32 	%rd132, %r16;
	st.global.u64 	[%rd131], %rd132;

$L__BB36_4:
	ret;

}
	// .globl	_Z29device_read_kernel_sync_sweepPdS_mmmmPlS0_
.visible .entry _Z29device_read_kernel_sync_sweepPdS_mmmmPlS0_(
	.param .u64 _Z29device_read_kernel_sync_sweepPdS_mmmmPlS0__param_0,
	.param .u64 _Z29device_read_kernel_sync_sweepPdS_mmmmPlS0__param_1,
	.param .u64 _Z29device_read_kernel_sync_sweepPdS_mmmmPlS0__param_2,
	.param .u64 _Z29device_read_kernel_sync_sweepPdS_mmmmPlS0__param_3,
	.param .u64 _Z29device_read_kernel_sync_sweepPdS_mmmmPlS0__param_4,
	.param .u64 _Z29device_read_kernel_sync_sweepPdS_mmmmPlS0__param_5,
	.param .u64 _Z29device_read_kernel_sync_sweepPdS_mmmmPlS0__param_6,
	.param .u64 _Z29device_read_kernel_sync_sweepPdS_mmmmPlS0__param_7
)
{
	.local .align 8 .b8 	__local_depot37[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<25>;
	.reg .b32 	%r<54>;
	.reg .b64 	%rd<109>;
	// demoted variable
	.shared .align 8 .b8 _ZZ29device_read_kernel_sync_sweepPdS_mmmmPlS0_E6clocks[8192];

	mov.u64 	%SPL, __local_depot37;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd38, [_Z29device_read_kernel_sync_sweepPdS_mmmmPlS0__param_0];
	ld.param.u64 	%rd39, [_Z29device_read_kernel_sync_sweepPdS_mmmmPlS0__param_1];
	ld.param.u64 	%rd40, [_Z29device_read_kernel_sync_sweepPdS_mmmmPlS0__param_2];
	ld.param.u64 	%rd44, [_Z29device_read_kernel_sync_sweepPdS_mmmmPlS0__param_3];
	ld.param.u64 	%rd45, [_Z29device_read_kernel_sync_sweepPdS_mmmmPlS0__param_4];
	ld.param.u64 	%rd41, [_Z29device_read_kernel_sync_sweepPdS_mmmmPlS0__param_5];
	ld.param.u64 	%rd42, [_Z29device_read_kernel_sync_sweepPdS_mmmmPlS0__param_6];
	ld.param.u64 	%rd46, [_Z29device_read_kernel_sync_sweepPdS_mmmmPlS0__param_7];
	cvta.to.global.u64 	%rd1, %rd46;
	mov.u32 	%r13, %ctaid.x;
	cvt.u64.u32 	%rd2, %r13;
	setp.lt.u64 	%p1, %rd2, %rd40;
	selp.b64 	%rd47, 0, %rd40, %p1;
	sub.s64 	%rd48, %rd2, %rd47;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32 	%rd49, %r1;
	mov.u32 	%r14, %ntid.x;
	cvt.u64.u32 	%rd3, %r14;
	mul.lo.s64 	%rd50, %rd48, %rd3;
	add.s64 	%rd4, %rd50, %rd49;
	// begin inline asm
	mov.u32 %r11, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd51, %r11;
	// begin inline asm
	mov.u32 %r12, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd52, %r12;
	bfi.b64 	%rd5, %rd52, %rd51, 32, 32;
	selp.b64 	%rd6, %rd44, %rd45, %p1;
	setp.eq.s64 	%p2, %rd41, 0;
	@%p2 bra 	$L__BB37_33;

	cvt.u32.u64 	%r15, %rd3;
	add.s64 	%rd7, %rd5, 4;
	mov.u32 	%r16, %tid.y;
	add.s32 	%r2, %r1, %r16;
	mov.u32 	%r17, %tid.z;
	neg.s32 	%r3, %r17;
	mov.u32 	%r18, %nctaid.y;
	mov.u32 	%r19, %nctaid.x;
	mul.lo.s32 	%r20, %r19, %r18;
	mov.u32 	%r21, %nctaid.z;
	mul.lo.s32 	%r22, %r20, %r21;
	mov.u32 	%r23, %ctaid.y;
	cvt.u32.u64 	%r24, %rd2;
	add.s32 	%r25, %r24, %r23;
	mov.u32 	%r26, %ctaid.z;
	neg.s32 	%r27, %r26;
	setp.eq.s32 	%p3, %r25, %r27;
	mov.u32 	%r28, -2147483647;
	sub.s32 	%r29, %r28, %r22;
	selp.b32 	%r4, %r29, 1, %p3;
	shl.b32 	%r30, %r1, 3;
	mov.u32 	%r31, _ZZ29device_read_kernel_sync_sweepPdS_mmmmPlS0_E6clocks;
	add.s32 	%r5, %r31, %r30;
	cvt.u64.u32 	%rd8, %r19;
	add.s64 	%rd9, %rd3, -2;
	add.s32 	%r32, %r15, -1;
	and.b32  	%r6, %r32, 3;
	cvt.u64.u32 	%rd55, %r6;
	not.b64 	%rd56, %rd55;
	add.s64 	%rd10, %rd56, %rd3;
	mov.u64 	%rd57, 264;
	sub.s64 	%rd58, %rd57, %rd40;
	selp.b64 	%rd59, %rd40, %rd58, %p1;
	mul.lo.s64 	%rd11, %rd59, %rd3;
	selp.b64 	%rd12, %rd38, %rd39, %p1;
	cvta.to.global.u64 	%rd13, %rd42;
	mov.u64 	%rd96, 0;

$L__BB37_2:
	setp.ne.s64 	%p4, %rd5, 0;
	@%p4 bra 	$L__BB37_4;

	// begin inline asm
	trap;
	// end inline asm

$L__BB37_4:
	setp.ne.s32 	%p5, %r2, %r3;
	barrier.sync 	0;
	@%p5 bra 	$L__BB37_7;

	// begin inline asm
	atom.add.release.gpu.u32 %r33,[%rd7],%r4;
	// end inline asm

$L__BB37_6:
	// begin inline asm
	ld.acquire.gpu.u32 %r35,[%rd7];
	// end inline asm
	xor.b32  	%r36, %r35, %r33;
	setp.gt.s32 	%p6, %r36, -1;
	@%p6 bra 	$L__BB37_6;

$L__BB37_7:
	barrier.sync 	0;
	// begin inline asm
	mov.u64 %rd62, %globaltimer;
	// end inline asm
	add.s64 	%rd63, %rd62, 1000000;
	st.global.u64 	[%rd1], %rd63;
	@%p4 bra 	$L__BB37_9;

	// begin inline asm
	trap;
	// end inline asm

$L__BB37_9:
	barrier.sync 	0;
	@%p5 bra 	$L__BB37_12;

	// begin inline asm
	atom.add.release.gpu.u32 %r37,[%rd7],%r4;
	// end inline asm

$L__BB37_11:
	// begin inline asm
	ld.acquire.gpu.u32 %r39,[%rd7];
	// end inline asm
	xor.b32  	%r40, %r39, %r37;
	setp.gt.s32 	%p9, %r40, -1;
	@%p9 bra 	$L__BB37_11;

$L__BB37_12:
	barrier.sync 	0;
	bar.sync 	0;
	ld.global.u64 	%rd16, [%rd1];

$L__BB37_13:
	// begin inline asm
	mov.u64 %rd66, %globaltimer;
	// end inline asm
	setp.lt.s64 	%p10, %rd66, %rd16;
	@%p10 bra 	$L__BB37_13;

	setp.ge.u64 	%p11, %rd4, %rd6;
	@%p11 bra 	$L__BB37_17;

	mov.u64 	%rd98, %rd4;

$L__BB37_16:
	shl.b64 	%rd69, %rd98, 3;
	add.s64 	%rd68, %rd12, %rd69;
	// begin inline asm
	ld.ca.u64 %rd67, [%rd68];
	// end inline asm
	xor.b64  	%rd100, %rd67, %rd100;
	add.s64 	%rd98, %rd98, %rd11;
	setp.lt.u64 	%p12, %rd98, %rd6;
	@%p12 bra 	$L__BB37_16;

$L__BB37_17:
	// begin inline asm
	mov.u64 %rd70, %globaltimer;
	// end inline asm
	sub.s64 	%rd71, %rd70, %rd16;
	st.shared.u64 	[%r5], %rd71;
	@%p4 bra 	$L__BB37_19;

	// begin inline asm
	trap;
	// end inline asm

$L__BB37_19:
	barrier.sync 	0;
	@%p5 bra 	$L__BB37_22;

	// begin inline asm
	atom.add.release.gpu.u32 %r41,[%rd7],%r4;
	// end inline asm

$L__BB37_21:
	// begin inline asm
	ld.acquire.gpu.u32 %r43,[%rd7];
	// end inline asm
	xor.b32  	%r44, %r43, %r41;
	setp.gt.s32 	%p15, %r44, -1;
	@%p15 bra 	$L__BB37_21;

$L__BB37_22:
	setp.ne.s32 	%p16, %r1, 0;
	barrier.sync 	0;
	@%p16 bra 	$L__BB37_32;

	setp.lt.u32 	%p17, %r15, 2;
	ld.shared.u64 	%rd107, [_ZZ29device_read_kernel_sync_sweepPdS_mmmmPlS0_E6clocks];
	@%p17 bra 	$L__BB37_31;

	setp.lt.u64 	%p18, %rd9, 3;
	mov.u64 	%rd105, 1;
	@%p18 bra 	$L__BB37_27;

	mov.u64 	%rd105, 1;
	mov.u64 	%rd103, %rd10;

$L__BB37_26:
	cvt.u32.u64 	%r46, %rd105;
	shl.b32 	%r47, %r46, 3;
	add.s32 	%r49, %r31, %r47;
	ld.shared.u64 	%rd77, [%r49];
	max.s64 	%rd78, %rd107, %rd77;
	ld.shared.u64 	%rd79, [%r49+8];
	max.s64 	%rd80, %rd78, %rd79;
	ld.shared.u64 	%rd81, [%r49+16];
	max.s64 	%rd82, %rd80, %rd81;
	ld.shared.u64 	%rd83, [%r49+24];
	max.s64 	%rd107, %rd82, %rd83;
	add.s64 	%rd105, %rd105, 4;
	add.s64 	%rd103, %rd103, -4;
	setp.ne.s64 	%p19, %rd103, 0;
	@%p19 bra 	$L__BB37_26;

$L__BB37_27:
	setp.eq.s32 	%p20, %r6, 0;
	@%p20 bra 	$L__BB37_31;

	setp.eq.s32 	%p21, %r6, 1;
	cvt.u32.u64 	%r50, %rd105;
	shl.b32 	%r51, %r50, 3;
	add.s32 	%r10, %r31, %r51;
	ld.shared.u64 	%rd84, [%r10];
	max.s64 	%rd107, %rd107, %rd84;
	@%p21 bra 	$L__BB37_31;

	setp.eq.s32 	%p22, %r6, 2;
	ld.shared.u64 	%rd85, [%r10+8];
	max.s64 	%rd107, %rd107, %rd85;
	@%p22 bra 	$L__BB37_31;

	ld.shared.u64 	%rd86, [%r10+16];
	max.s64 	%rd107, %rd107, %rd86;

$L__BB37_31:
	mul.lo.s64 	%rd87, %rd96, %rd8;
	add.s64 	%rd88, %rd87, %rd2;
	shl.b64 	%rd89, %rd88, 3;
	add.s64 	%rd90, %rd13, %rd89;
	st.global.u64 	[%rd90], %rd107;

$L__BB37_32:
	add.s64 	%rd96, %rd96, 1;
	setp.lt.u64 	%p23, %rd96, %rd41;
	@%p23 bra 	$L__BB37_2;

$L__BB37_33:
	ld.global.u64 	%rd91, [%rd1];
	setp.ne.s64 	%p24, %rd91, 0;
	@%p24 bra 	$L__BB37_35;

	add.u64 	%rd92, %SP, 0;
	add.u64 	%rd93, %SPL, 0;
	st.local.u64 	[%rd93], %rd100;
	mov.u64 	%rd94, $str$2;
	cvta.global.u64 	%rd95, %rd94;
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd95;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd92;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r53, [retval0+0];
	} // callseq 7

$L__BB37_35:
	ret;

}
	// .globl	_Z11stream_copyIdEvPT_S1_m
.visible .entry _Z11stream_copyIdEvPT_S1_m(
	.param .u64 _Z11stream_copyIdEvPT_S1_m_param_0,
	.param .u64 _Z11stream_copyIdEvPT_S1_m_param_1,
	.param .u64 _Z11stream_copyIdEvPT_S1_m_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<10>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd6, [_Z11stream_copyIdEvPT_S1_m_param_0];
	ld.param.u64 	%rd7, [_Z11stream_copyIdEvPT_S1_m_param_1];
	ld.param.u64 	%rd8, [_Z11stream_copyIdEvPT_S1_m_param_2];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r9, %r6, %r1, %r7;
	cvt.u64.u32 	%rd12, %r9;
	setp.ge.u64 	%p1, %rd12, %rd8;
	@%p1 bra 	$L__BB38_3;

	mov.u32 	%r8, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r8;
	cvta.to.global.u64 	%rd2, %rd7;
	cvta.to.global.u64 	%rd3, %rd6;

$L__BB38_2:
	shl.b64 	%rd9, %rd12, 3;
	add.s64 	%rd10, %rd2, %rd9;
	ld.global.f64 	%fd1, [%rd10];
	add.s64 	%rd11, %rd3, %rd9;
	st.global.f64 	[%rd11], %fd1;
	add.s32 	%r9, %r9, %r3;
	cvt.u64.u32 	%rd12, %r9;
	setp.lt.u64 	%p2, %rd12, %rd8;
	@%p2 bra 	$L__BB38_2;

$L__BB38_3:
	ret;

}

